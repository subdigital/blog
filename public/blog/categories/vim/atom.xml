<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Fickle Bits]]></title>
  <link href="http://benscheirman.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://benscheirman.com/"/>
  <updated>2012-07-07T16:09:13-05:00</updated>
  <id>http://benscheirman.com/</id>
  <author>
    <name><![CDATA[Ben Scheirman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharing Vim Configuration Between Machines]]></title>
    <link href="http://benscheirman.com/2011/10/sharing-vim-configuration-between-machines/"/>
    <updated>2011-10-06T09:29:00-05:00</updated>
    <id>http://benscheirman.com/2011/10/sharing-vim-configuration-between-machines</id>
    <content type="html"><![CDATA[<p>I do most of my development on my MacBook Pro, however I have a nice 27"
iMac at home, and it is refreshing to use it for development when I can.
It's fast and has a huge screen.  The only downside is all my custom
development configurations are on my MacBook Pro!</p>

<p>There are a number of options you can use to share settings between
machines, but I'm a fan of using <a href="http://dropbox.com">Dropbox</a> (<a href="http://db.tt/sYjPEQl">referral link</a>). Any change I make, on either machine, will get automatically
synchronized for me.</p>

<p>Since my Vim configurations were already present on my MacBook Pro, the
first step was to copy them over to a Dropbox folder:</p>

<p>```</p>

<pre><code>mkdir ~/Dropbox/vim
cp -R ~/.vim ~/Dropbox/vim
cp ~/.vimrc ~/Dropbox/vim
cp ~/.vimrc.local ~/Dropbox/vim
cp ~/.gvimrc ~/Dropbox/vim
</code></pre>

<p>```</p>

<p>The next step was to come up with an installer script that would symlink
these files on a new machine.  I made sure to move existing vim files to
a temporary filename so that I wouldn't lose anything accidentally.</p>

<p>```</p>

<pre><code>set -o errexit

function confirm()
{
    echo -n "$@ "
    read -e answer
    for response in y Y yes YES Yes Sure sure SURE OK ok Ok
    do
        if [ "_$answer" == "_$response" ]
        then
            return 0
        fi
    done

    # Any answer other than the list above is considerred a "no" answer
    return 1
}

function link_file() 
{
  echo "symlinking $1"
  ln -s "$PWD/$1" "$HOME/$1"
}

echo "This will remove any existing vim configuration files and simlink them with the files here."
confirm "Are you sure?"
if [ $? -eq 0 ]
then
  for file in ~/.vimrc ~/.vimrc.local ~/.gvimrc
  do
    if [[ -f $file ]]; then
      echo "Moving $file to $file.bak"
      mv $file $file.bak
    fi
  done

  for dir in ~/.vim
  do
    if [[ -d $dir ]]; then
      echo "Moving $dir directory to $dir.bak"
      mv $dir $dir.bak
    fi
  done
fi

echo "symlinking"

for file in .vim .vimrc .vimrc.local .gvimrc
do
  link_file $file
done

echo "Done.  Check that it works.  If so, you can remove the .bak files, if any"
</code></pre>

<p>```</p>

<p>Make sure the script is executable by running:</p>

<p>```</p>

<pre><code>chmod +x setup.sh
</code></pre>

<p>```</p>

<p>Then run this script on any new machine that you want to use Vim on. It will symlink these files from your Dropbox folder to your home
folder:</p>

<ul>
<li><code>.vim/</code></li>
<li><code>.vimrc</code></li>
<li><code>.vimrc.local</code></li>
<li><code>.gvimrc</code></li>
</ul>


<p>After it's done, check that it is working.  Remove any .bak files that
you don't need anymore.</p>

<p>And that's it. You have an automatic Vim configuration synching system
between machines.  It works great for your shell configuration as well!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - Could Not Invoke JSLint]]></title>
    <link href="http://benscheirman.com/2011/08/vim---could-not-invoke-jslint/"/>
    <updated>2011-08-26T08:59:00-05:00</updated>
    <id>http://benscheirman.com/2011/08/vim---could-not-invoke-jslint</id>
    <content type="html"><![CDATA[<p>If you're running MacVim with Janus and have upgraded to Lion, you may
have noticed a little error when you open JavaScript files:</p>

<blockquote><p>Error detected while processing function 87_JSLint:
Line 33:
could not invoke JSLint!</p></blockquote>

<p>It seems many are having <a href="https://github.com/hallettj/jslint.vim/issues/13">this issue</a>.  There are 2 things to check:</p>

<ol>
<li>Make sure you have Node in your path.  Confirm this by typing <code>which
node</code> and make sure it resolves a binary somewhere on your system.</li>
<li>Open up your <code>~/.vimrc.local</code> and add this command:</li>
</ol>


<p>```vim</p>

<pre><code>" Use Node.js for JavaScript interpretation
let $JS_CMD='node'
</code></pre>

<p>```</p>

<p>Kudos to <a href="http://github.com/eventualbuddha">eventualbuddha</a> for
figuring this out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Vim Journey]]></title>
    <link href="http://benscheirman.com/2011/08/my-vim-journey/"/>
    <updated>2011-08-17T23:53:00-05:00</updated>
    <id>http://benscheirman.com/2011/08/my-vim-journey</id>
    <content type="html"><![CDATA[<p>For my Rails work, I've largely leaned on <a href="http://macromates.org">TextMate</a>.  It's used by many Rubyists, looks sexy,
and is easily extended.</p>

<p>I still use TextMate frequently, but I've been ramping up on my Vim
skills and I've recently come to a point where I think I'm pretty
productive in it.</p>

<p>My initial frustrations with Vim were that it was too configurable.
Talk to any Vim power-user and you'll find a completely different set of
plugins &amp; keyboard shortcuts.  If you snag a friend's set of Vim
configuration files (like I did) you might find yourself frustrated that
there's too much to learn and it's difficult to know where various
behaviors are coming from.</p>

<p>In this post, I'll attempt to demonstrate a very sane Vim setup that
newcomers can use to get started and not be too overwhelmed.</p>

<h2>Why Vim?</h2>

<p>Before I get started with the basics of Vim, why would you use it in the
first place?</p>

<p>For me it boils down to this:  <em>I love staying on the keyboard</em>.
Vim may not make you faster (<em>in fact initially you'll be a lot slower</em>) but it can fit your workflow better.</p>

<p>Another big differentiator of Vim is <em>Command Mode</em>.  The notion
here is that you spend more time wrangling text rather than creating it
from scratch.  That's certainly true of my code.</p>

<p>It is important, however, that in the larger software ecosystem,
<em>typing is not the bottleneck</em>.  Don't expect Vim to make you build
the right software faster.</p>

<p>Vim enables a keyboard-optimized workflow that <em>may</em> make you faster.
YMMV.  If you're fast with TextMate or Emacs or don't want to spend the
time to learn something new, then Vim may very well not be for you.</p>

<p>Lastly, Vim is ubiquitous.  It's on every platform and
you can carry your configuration (or a very large set of it) everywhere.
People frequently put their vim configurations on Github for themselves
and others to utilize.</p>

<h2>Getting MacVim</h2>

<p>Almost all Unix-based systems (like Mac) include a terminal version of
Vim.  The version included on OS X isn't compiled with Ruby support, so
some plugins won't work.  In addition, it doesn't have OS-level
integration like Copy &amp; Paste in the same buffer.</p>

<p>Most Vim users I know use MacVim, which comes pre-compiled with Ruby
support, has tabs, and more.</p>

<p>If you have <a href="http://mxcl.github.com/homebrew/">homebrew</a> installed, just
type:</p>

<p><code>
brew install  macvim
</code></p>

<p>If you'd rather grab a pre-built binary, then head on over <a href="https://github.com/b4winckler/macvim">here</a>.</p>

<p>You'll also want to make sure that the <code>mvim</code> binary is in your path.</p>

<h2>Basic Vim Navigation</h2>

<p>I won't cover everything you can do in Vim here, but here's just enough
to get you started:</p>

<p>In Command Mode:</p>

<ul>
<li>Press <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> to move the cursor around.  It will feel weird, but you start to appreciate not
lifting your hand off of the home row to reach for the arrow keys.</li>
<li>Press <code>G</code> to go to the end of a document, <code>gg</code> to go to the top of
the document.</li>
<li>Press <code>i</code> to go to insert mode at the current position</li>
<li>Press <code>I</code> to insert at the beginning of the line</li>
<li>Press <code>a</code> to "append" content after the cursor</li>
<li>Press <code>A</code> to "append" content at the end of a line</li>
<li>Type <code>cw</code> ("change word") to replace the current word and go into insert mode</li>
<li>Type <code>dta</code> to ("delete 'til the letter a") in a line</li>
</ul>


<p>In Insert Mode:</p>

<ul>
<li>Press <code>esc</code> to go back to command mode.</li>
</ul>


<p>Commands:</p>

<ul>
<li>In Command Mode, you can type commands by prefixing them with <code>:</code>.</li>
<li>To write the changes to the current buffer (save) type <code>:w</code> and hit
<code>enter</code>.  Often times you'll write &amp; quit in one command, with <code>:wq</code>.</li>
</ul>


<p>Feel free to use the mouse &amp; arrow-keys while you're getting used to everything.  It
will feel weird.</p>

<p>For more Vim-fu, definitely check out this <a href="http://peepcode.com/products/smash-into-vim-i">PeepCode
screencast</a>.</p>

<h2>Installing a Base Set of Plugins with Janus</h2>

<p>The real power of Vim is in the plugins, and fortunately Yehuda Katz &amp;
Carl Lerche have put together an opinionated and useful set of plugins
that are pre-configured and work well together.  Take a look at the plugins it includes
<a href="https://github.com/carlhuda/janus">here</a>.</p>

<p>Getting Janus installed is easy.  If you are super trust-worthy and
don't mind running a script blindly (I don't recommend it) you can
simply run:</p>

<p>```</p>

<pre><code>curl https://raw.github.com/carlhuda/janus/master/bootstrap.sh -o - | sh
</code></pre>

<p>```</p>

<p>More explicit instructions for the paranoid can be found on <a href="http://github.com/carlhuda/janus">the github
page</a>.</p>

<p>Once you have Janus installed, your Vim will be on steroids. Don't worry
though, I'll try to cover the most important things you'll be using.</p>

<h2>Getting a Decent Theme installed</h2>

<p>MacVim installs a hundred nasty looking themes, but a few of them are
worth taking a look at.  Here are some that I like:</p>

<ul>
<li>molokai</li>
<li>railscasts</li>
<li>vividchalk</li>
<li>vibrantink</li>
</ul>


<p>If you want to install other themes (like this nice <a href="http://www.vim.org/scripts/script.php?script_id=2855">github</a> one) then you
simply download it &amp; copy the <code>theme.vim</code> (or whatever the theme is
called) to <code>~/.vim/colors</code>.</p>

<p>To switch between the themes that are installed, you can use the menu,
or you can type <code>:colorscheme &lt;scheme&gt;</code>.</p>

<p>To set defaults for your installation, you'd normally add commands to
<code>~/.vimrc</code> however Janus has taken that file over.  It instead reads
your settings from <code>~/.vimrc.local</code>.  In order to provide settings for
graphical Vim installations (like MacVim) there's also a <code>~/.gvimrc</code>
file.</p>

<p>Open up that file (<code>:edit ~/.gvimrc</code>) and add the following commands:</p>

<p>``` vim</p>

<pre><code>colorscheme github
set guifont=Menlo:h14
</code></pre>

<p>```</p>

<p>Feel free to tweak this to contain your favorite color scheme &amp; font.
In order to see these changes you have to "source" the file:</p>

<p>```</p>

<pre><code>:source %
</code></pre>

<p>```</p>

<p>(<code>%</code> here means "current file")</p>

<p>You should see the changes take effect immediately.</p>

<h2>Opening MacVim with a "Project"</h2>

<p>One common thing in TextMate is to <code>cd</code> into a project and then type
<code>mate .</code> which will open TextMate's project drawer with all of the files
in that directory loaded up.</p>

<p>In MacVim, you can do the same.  Navigate to a folder with some content
(like a Rails app) and type: <code>mvim .</code></p>

<p>You should see something resembling a file navigator.  You can navigate
these with the same movement commands from above.</p>

<p>Once you've chosen a file, press <code>enter</code> to open it in the buffer.</p>

<p><span class='pullquote-right' data-pullquote='The leader key is a special, configurable key used to create quick shortcut combinations.'>
Janus comes with NERDTree, which has similar behavior to TextMate's
Project Drawer.  Open up the NERDTree pane by typing <code>&lt;leader&gt;-n</code> or <code>\n</code>. By default the leader key is set to backslash.
The leader key is a special, configurable key used to create quick shortcut combinations.
</span></p>

<p>The NERDTree window can be collapsed by typing <code>&lt;leader&gt;-n</code> again.</p>

<p>You might want to instead find the file by searching for it by name.
For that, the aptly-named Command-T plugin can be hepful.</p>

<p>Command-T can be activated (by default) with <code>&lt;leader&gt;-t</code>.  Start typing
and it will auto complete the results.</p>

<h2>Scared Yet?</h2>

<p>Writing this reminds me of how hard it was to get started.  I can only
offer some encouragement that with practice, Vim does start to feel like
 you can leverage your fast typing skills to really.</p>

<p>Practice only a couple of commands at a time.  Really learn what they
are doing and then move one to the next command.  Print out a cheet
sheet.  Pair with someone else who uses Vim.</p>

<p>I hope you found this intro useful. I'll cover some more Vim tricks as time goes on.</p>
]]></content>
  </entry>
  
</feed>
