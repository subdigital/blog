<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Fickle Bits</title>
  <link href="http://benscheirman.com/atom.xml" rel="self"/>
  <link href="http://benscheirman.com/"/>
  <updated>2011-08-30T08:22:32-05:00</updated>
  <id>http://benscheirman.com/</id>
  <author>
    <name>Ben Scheirman</name>
    
  </author>

  
  <entry>
    <title>The Curly Brace Tax</title>
    <link href="http://benscheirman.com/2008/10/the-curly-brace-tax/"/>
    <updated>2008-10-05T00:00:00-05:00</updated>
    <id>http://benscheirman.com/2008/10/the-curly-brace-tax</id>
    <content type="html">&lt;p&gt;&lt;em&gt;(I shamelessly stole this title from a chat with &lt;a href=&quot;http://mhinze.com/&quot; target=&quot;_blank&quot;&gt;Matt Hinze&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;99% of the examples you see out there for ASP.NET MVC are using WebFormsViewEngine.  That's fine, it's familiar, it benefits from intellisense, compilation, and refactoring support.  But all of that comes at a price, and that price is (at times) &lt;strong&gt;incredibly wordy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Picture this example, taken from the Site.master (master page) in the Preview 5 new project template.&lt;/p&gt;

&lt;p&gt;At the top of the page, they want to render some text if the user is logged in, and different text if the user isn't logged in.  Here are the screens:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you're not logged in:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://benscheirman.com/images/mvcmasterpagelogin_thumb.jpg&quot; alt=&quot;mvc-masterpage-login&quot;  border=&quot;0&quot;  /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And when you're logged in...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://benscheirman.com/images/mvcmasterpagelogout_thumb.jpg&quot; alt=&quot;mvc-masterpage-logout&quot;  border=&quot;0&quot;  /&gt;&lt;/p&gt;

&lt;p&gt;This is implemented using ASPX code that looks like this:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;&amp;lt;div id=&quot;logindisplay&quot;&gt;
&lt;/div&gt;&lt;div class='line'&gt;  &amp;lt;% if (Request.IsAuthenticated) { %&gt;
&lt;/div&gt;&lt;div class='line'&gt;    Welcome &amp;lt;b&gt;&amp;lt;%= Html.Encode(Page.User.Identity.Name) %&gt;&amp;lt;/b&gt;![ &amp;lt;%=Html.ActionLink(&quot;Logout&quot;, &quot;Logout&quot;, &quot;Account&quot;) %&gt; ]
&lt;/div&gt;&lt;div class='line'&gt;&amp;lt;% } else { %&gt; 
&lt;/div&gt;&lt;div class='line'&gt;    [ &amp;lt;%=Html.ActionLink(&quot;Login&quot;, &quot;Login&quot;, &quot;Account&quot;) %&gt; ]
&lt;/div&gt;&lt;div class='line'&gt;&amp;lt;% } %&gt;
&lt;/div&gt;&lt;div class='line'&gt;&amp;lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Now let's take the same example and convert it to &lt;a href=&quot;http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html&quot; target=&quot;_blank&quot;&gt;NVelocity&lt;/a&gt;, another view engine with a looser syntax:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;&amp;lt;div id=&quot;logindisplay&quot;&gt;   
&lt;/div&gt;&lt;div class='line'&gt;  #if ($isAuthenticated)
&lt;/div&gt;&lt;div class='line'&gt;    Welcome &amp;lt;b&gt;$html.encode($user.name)&amp;lt;/b&gt;!      [ $html.actionlink(&quot;Logout&quot;, &quot;logout&quot;, &quot;account&quot;) ]
&lt;/div&gt;&lt;div class='line'&gt;  #else
&lt;/div&gt;&lt;div class='line'&gt;    [ $html.actionlink(&quot;Login&quot;, &quot;login&quot;, &quot;account&quot;) ]   #end
&lt;/div&gt;&lt;div class='line'&gt;&amp;lt;/div&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;We'd have to stuff the &lt;code&gt;$isAuthenticated&lt;/code&gt; and &lt;code&gt;$user&lt;/code&gt; values into &lt;code&gt;ViewData&lt;/code&gt;, but that's a piece of cake.&lt;br/&gt;
This is a great example of how concise we can get if we don't rely on all that strong typing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The beauty of this is, the key that you use for ViewData becomes the object you interact with on the view&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In NVelocity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;case doesn't matter&lt;/li&gt;
&lt;li&gt;no need to open up &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; tags, you can embed it directly in your template&lt;/li&gt;
&lt;li&gt;type doesn't matter.  It's evaluated at runtime.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are some downsides, however:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You don't get compile time checking for your views.  If I wrote &lt;code&gt;$htlm.actionlink(..)&lt;/code&gt;  I'd get an
error at runtime.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance.  Compiled views are much faster than interpreted ones.  It's likely that this doesn't matter for most sites out there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No intellisense.  (The arguments to ActionLink above are not obvious, so you just have to memorize it)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Refactoring support&lt;/strong&gt;.  This is a big one.  If you rename your actions, you'll have to do a string comparison search to get the various links you might having lying around in your view.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That last one is really the only one that I miss when doing something in NVelocity.  In any case, try it out, see what you think!&lt;/p&gt;
</content>
  </entry>
  
</feed>
