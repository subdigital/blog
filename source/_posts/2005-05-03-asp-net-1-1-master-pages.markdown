--- 
layout: post
title: ASP.NET 1.1 Master Pages
date: 2005-5-3
comments: true
link: false
---
<div style="clear:both;"></div>I was too impatient to wait for .NET 2.0's Master Pages, so I started to look at some of the (many) implementations for master pages in ASP.NET 1.1 ...<br /><br /><p><br />I ran across <a href="http://www.codeproject.com/aspnet/effectivempages.asp">this article</a> at <a href="http://www.codeproject.com">CodeProject</a> and I started to implement it in my new project.The basic idea behind it is to parse a child page (Context Page) and before Viewstate is even loaded, it does a Server.Execute to execute the desired master page, and the master page just loads its controls into the HttpContext (it makes sure not to render itself).The execution resumes at the Context page and the entire control collection of &lt;form&gt; is copied into a specifically named control and finishes execution!</p><br /><br />The master page looks like this:<br /><div id="code"><br />{% codeblock %}<br />&lt;html&gt;<br />...<br /><span class="comments">//header & navigation</span><br />&lt;div id="masterContextContainer"&gt; &lt;/div&gt;<br /><br /><span class="comments">//footer</span><br />&lt;/html&gt;<br />{% endcodeblock %}<br /></div><br /><br /><p><br />That's it!Mark the class with the [MasterPage()] attribute and it's ready to go!<br /></p><br /><p><br />The Context Page is just a normal aspx page that has the class marked as [ContextPage(masterPageAlias)]and it's done.<br /></p><br /><p><br />There are a number of different methods to accomplish this, but I found this one to be very nice because A) I can inherit my PageBase class from this MasterContextPage and start using it on existing web forms...B) it's very clever!<br /></p><br />The only thing I found that is a little iffy is the Tracing.If you have both pages enabled it messes up, so make sure and set the Master Page to trace="false" so that you don't get any conflicts with control id's.<div style="clear:both; padding-bottom: 0.25em;"></div>
