--- 
layout: post
title: A Journey With NHibernate - Part 2
date: 2006-7-10
comments: true
link: false
---
<p><a title="Part 1" href="http://www.flux88.com/2006/07/05/A+Journey+With+NHibernate++Part+1.aspx">Last time</a> I talked pretty high-level about starting a project with NHibernate.</p><p>This time I am going to start off creating a pet project to demonstrate how to implement these ideas.&nbsp; First we’ll implement a simple domain model to support our features.&nbsp; We will combine these with unit tests to verify behavior.</p><p>Let’s create a dummy video rental system.&nbsp; We’ll call it <strong>Videocracy</strong> (hey, that’s pretty good!).&nbsp; In this sytem we’ll have to support the following features:</p><ul><li>Add new Customer / Account</li><li>Add other members to an account</li><li>Restrict certain members from renting certain content</li><li>Query for a Customer by Customer # (swipe card, etc), phone number, or last name</li><li>Add new rental item (movie, video game, game console, vcr, etc)</li><li>Rent an item to a customer</li><li>Check items back in from a customer</li><li>Get movies checked out for a customer</li><li>Calculate late fees for a customer</li><li>Query for an item, see who has it</li></ul><p>I think I will create this as an ASP.NET application to demonstrate some of the concerns with NHibernate in combination with the stateless nature of web applications.&nbsp; WinForms topics will be relatively straightforward in comparison.</p><p>Following domain-driven design principles, I want to develop the core functionality of the domain.&nbsp; I want to unit test it.&nbsp; And I don’t want it to be influenced by infrastructure concerns.&nbsp; Many people would start this project off by creating the database structure.&nbsp; I will put this off until much later so that I can not let a relational design influence my object-oriented design.&nbsp; The database <em>supports</em> my object model, not the other way around.</p><p><strong>Designing the model<br></strong>Ok, just about any system has users, and in this case there are a couple types of users.&nbsp; We’ll start by modeling what a “Person” means to our system.&nbsp; A person can represent a customer or employee, so we’ll join the commonalities in the Person class:</p><p><a href="http://www.flux88.com/uploads/CropperCapture%5B9%5D.Jpg"><img src="/images/CropperCapture%5B9%5D_thumb__.jpg" alt="Person class"  border="1" /></a></p><p>Employees will have additional data relevant only to them (I kept it simple):</p><p><img src="/images/CropperCapture%5B11%5D_small_.jpg" alt="Employee class"  border="1" /></p><p>And finally, the Customer class:</p><p><img src="/images/CropperCapture%5B12%5D_small_.jpg" alt="Customer class"  border="1" /></p><p>I decided to leave these pretty simple.&nbsp; There is no need to implement features unless there is an existing requirement for them.</p><p>Next up is the Account class.&nbsp; An account will have at least 1 customer.&nbsp; The account will also have an outstanding balance, so that an employee can ask for late fee payments when they rent new items.</p><p>Accounts will have current checked out items as well, so I modeled a simple Video Item.&nbsp; A video represents the physical item that is checked out, but&nbsp; each video is actually a movie, so there is a reference to a movie class as well.&nbsp; Games will be vastly similar, so I’ll omit it here.&nbsp; Here’s what the whole thing looks like now:</p><p><a href="http://www.flux88.com/uploads/CropperCapture%5B13%5D.Jpg"><img src="/images/CropperCapture%5B13%5D_thumb_.jpg" alt="Account, Video classes"  border="1" /></a></p><p>As you can see, the account holds a reference to its members.&nbsp; This is a generic list, and though NHibernate does not support it (yet) we can implement them using the excellent NHibernate.Generics assembly written by the very intelligent&nbsp;<a href="http://www.ayende.com/projects/nhibernate-query-analyzer/generics.aspx">Ayende Rahien</a>.</p><p>I’m not entirely happy with the domain model right now.&nbsp; I think that having the Account directly hold a reference to its currently checked out items is a code-smell, but I can refactor that a bit later.&nbsp; I think this kind of information will be better delivered by querying a service rather than contained within the object itself.&nbsp; (Making a note to refactor…….).</p><p>Next up, we need to model the actual rental structure.&nbsp; This is where the design will take the most pressure.</p><p><a href="http://www.flux88.com/uploads/CropperCapture%5B14%5D.Jpg"><img src="/images/CropperCapture%5B14%5D_thumb_.jpg" alt="CropperCapture[14]"  border="1" /></a></p><p>A customer grabs some movies and goes to the counter.&nbsp; The employee opens his account and starts a new <em>Transaction<strong>.&nbsp; </strong>Items</em>&nbsp;are scanned and added to the <em>Transaction</em>.&nbsp; The rental encompasses that dateRented, dateDue, dateReturned and late calculating logic.&nbsp; I will defer late fee calculation until later as a strategy class, as that is not the responsibility of a rental.</p><p>I decided to remove the reference to the <em>ItemsCheckedOut</em> of the <em>Account</em> class.&nbsp; This data is provided through the rental structure, and a simple query will return items that have not yet been returned.&nbsp; If I had already made this change in the database as well as the object model, it would be more difficult to change.&nbsp; If a change is difficult to make, developers are less likely to make the change.</p><p>I realize that we haven’t yet touched NHibernate yet, but I’m getting there.&nbsp; I want to demonstrate how NHibernate fits with Domain-Driven Design.</p><p>I think we’re at a point to start unit testing the behavior of the system.&nbsp; Next time I’ll introduce a testing project and go through some behavior tests.</p>
