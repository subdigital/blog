--- 
layout: post
title: Exporting Visual Studio Solutions with SolutionFactory
date: 2009-4-13
comments: true
link: false
---
<p><img src="/images/visual%20studio.png" align="right"  height="40" /></p> <p>Part of my job is to create reusable code, patterns, designs, solutions, etc for other developers to leverage.&nbsp; Getting started using some of these things can be initially tough for someone who hasn't had a lot of experience with long-term, maintainable solution structures for projects that use:</p> <ul> <li>an automated build  <li>3rd party libraries  <li>machine-specific configuration  <li><a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" target="_blank">D.R.Y.</a> for things like connection strings, etc.</li></ul> <p>Because of these things, I favor a folder structure similar to this one:</p> <p><img src="/images/image_146df75b-7e7a-46d3-b3a5-bfe159f7ad44.png" alt="image"  height="529" /> </p> <p>This keeps things tidy.&nbsp; There is a home for everything.&nbsp; Third party libraries get checked in to source control, as well as any light-weight developer tools that we use during the build.&nbsp; Everything you need to build the software on a developer's machine should be here.&nbsp; (<em>Of course I assume that you already have the appropriate Visual Studio &amp; database server on your local machine.)</em></p> <p>In addition, <strong>many</strong> of our projects look something like this:</p> <ul> <li>App.UI  <li>App.Core  <li>App.Persistence  <li>App.Tests</li></ul> <p>Granted, this is very short-sighted and won't be the end-all-be-all solution structure for all projects.&nbsp; <strong>But the goal here is to get you (a developer) started really quickly</strong>.&nbsp; These projects can already contains some things that get from nothing to something tangible in short time.</p> <p>My sample solution contains:</p> <ul> <li>An MVC project with a standard look &amp; feel  <ul> <li>images  <li>javascript files</li></ul> <li>A sample CRUD screen, showing a small example of the various players in displaying &amp; updating data.  <ul> <li>NHibernate  <li>FluentNHibernate  <li>NHibernate.Linq  <li>an IOC container  <li>an MVC Controller factory</li></ul> <li>A test project that shows both unit and integration style tests.&nbsp; Some nice fluent testing extensions are left in to show how it works. (the target audience will probably only have a C# 2.0 background).</li></ul> <p>All of this is pre-wired up.&nbsp; Dependencies are referenced in each project.&nbsp; The libraries are located in a relative URL, meaning other people who check out this code can build immediately.&nbsp; In addition, there is a sample NAnt script that shows how to build &amp; test the software.</p> <p>It's about convention over configuration.&nbsp; For some applications, if they don't want to do it this way, fine.&nbsp; It's not about enforcement, it's about gentle guidance &amp; encouragement.</p> <h2>Packaging it all up</h2> <p><img src="/images/Hell_Alamy460.jpg" align="left"  height="144" />So I went on the path of trying to export this into a set of Visual Studio project templates.&nbsp; I found the project templates to be less-than helpful for a few reasons.&nbsp; First, it assumes that you keep your projects in the root of the project folder structure.&nbsp; Second, there seemed to be no way to elegantly package up assemblies that the project depended on.&nbsp; I looked at <a href="http://code.google.com/p/sharp-architecture/" target="_blank">S#arp Architecture</a> for some help, but quickly realized that there isn't an easy road to doing all of this.&nbsp; In addition, as far as I could tell there is no way to automatically create solution templates.&nbsp; You have to create project templates for each project and then manually stitch them together.</p> <p>This violated my #1 rule with the templates.&nbsp; <strong>In order for them to be successful, they must be really easy to change</strong>.&nbsp; I figure that in 2 months time, something in the template will have changed, or someone will want to tweak the design, or upgrade to a new version of a dependant assembly.&nbsp; If they have to go through all of those hoops to publish a new template, they just won't do it.&nbsp; All of the effort on the initial template will be wasted.</p> <p><img src="/images/Factory-Yellow-256x256_dae50722-4932-4e9b-a70c-9f3883ba7050.png" align="right"  height="100" />Then I came across <a href="http://solutionfactory.codeplex.com" target="_blank">SolutionFactory</a>, which is a project started by <a href="http://www.lostechies.com/blogs/hex/" target="_blank">Eric Hexter</a> up on <a href="http://codeplex.com" target="_blank">Codeplex</a>.&nbsp; It consists of 2 major components:</p> <ul> <li>A template wizard that handles all of the post-launch tasks, such as moving the projects to the right location, fixing up references, etc.  <li>A Visual Studio add-in that creates a large solution template, containing multiple vstemplate files (project templates) and also respects my folder structure.&nbsp; Nice!</li></ul> <p>Usage is pretty dead simple.&nbsp; After installing, you get a new add-in.&nbsp; You have to enable the add-in before using it.</p> <p>&nbsp;<img src="/images/image_ee84c045-c405-4380-aa89-8e4d54bc1d61.png" alt="image"  height="545" /> </p> <p><img src="/images/image_202a8bd8-c38a-44a2-936c-e9bf8633bb46.png" alt="image"  height="358" /> </p> <p>Once you place the checkmark next to the Solution Factory add-in and click OK, you should see a new menu item in Visual Studio.</p> <p><img src="/images/image_d9932ca2-4bf1-4919-862f-c56d8874b0cd.png" alt="image"  height="545" /> </p> <p>When you select "Export Template" from the Solution Factory menu, you are presented with this dialog:</p> <p><img src="/images/image_898ce309-7205-469d-bfe9-479a7fe22b79.png" alt="image"  height="545" /> </p> <p>This controls your exported VSI file.&nbsp; One cool thing to note is that you can have a custom command run as part of the template invocation process.&nbsp; This is especially helpful if you have a firstTimeConfig.bat file or similar.&nbsp; Sometimes you just have to run the build once to make sure everything is in place.</p> <p><strong>During the export, any remnants of TFS source control will be stripped out in the target folder</strong>.&nbsp; Any read-only files will be unlocked, any *.*scc files will be deleted, and *.csproj files will be modified to remove the source control bindings.&nbsp; If this isn't done, you'll be prompted to remove source control bindings for each project every time you create a new project based on the template.&nbsp; Yuck!</p> <p>When the export is finished (it takes about a minute) you should see a message box like this:</p> <p><img src="/images/image_334964b7-3f86-4a73-9401-c47554670e03.png" alt="image"  height="130" /> </p> <p>Now if we look in our <strong>c:\temp</strong> folder, we should see some new files:</p> <p><img src="/images/image_b0d52aef-5cd9-4d96-8ab4-73f70a9cfc5f.png" alt="image"  height="67" /> </p> <p>The VSI is a <em>Visual Studio Installer</em> file, and it simplifies putting the template zip file into Visual Studio.&nbsp; All you
really have to do is copy it to the appropriate Visual Studio 2008\Templates folder and run devenv.exe /installvstemplates to get it to rebuild the template cache.&nbsp; When you run the VSI, you'll get a simple installer.&nbsp; <strong>It will warn you that the template is not signed, just press OK</strong>.</p> <p>There is one caveat though:&nbsp; Our template relies on SolutionFactory.Wizard.dll to run some custom actions when the template is invoked.&nbsp; The VSI file doesn't have permissions to copy files into C:\Program Files, so until a custom installer (MSI) is made, you have to copy this dll manually.</p> <p>To do this, close down all instances of Visual Studio and copy SolutionFactory.Wizard.dll into c:\program files\Microsoft Visual Studio 9.0\Common 7\IDE\Private Assemblies.&nbsp; (on Vista/7 this path may be different, so adjust accordingly).&nbsp; This only has to be done once, and subsequent uses of the template will use this dll.</p> <p>Now, fire up a fresh copy of Visual Studio, choose File-&gt;New Project, and see our new template!</p> <p><img src="/images/image_5d06788c-0d01-4147-b773-e5d9200d4f58.png" alt="image"  height="496" /> </p> <p>When you click OK, Visual Studio will do a little dance, make sure you wait for it to finish!&nbsp; When it's all done, you'll end up with this:</p> <p><img src="/images/image_744bafa8-d6c6-4025-8a7e-4daea6ab88d8.png" alt="image"  height="480" />&nbsp;</p> <p>Every thing is completely packaged up, with multiple projects, 3rd party libraries, tools, and an automated build.&nbsp; The best part is that we can keep the template up to date and re-publish easily.</p>
