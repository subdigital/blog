--- 
layout: post
title: Review - Agile Principles, Patterns, and Practices in C#
date: 2007-4-19
comments: true
link: false
---
<div dir="ltr"><font face="Trebuchet MS" color="#000000" size="2"><font color="#0066cc"><a href="http://www.amazon.com/Principles-Patterns-Practices-Robert-Martin/dp/0131857258"><img alt="" src="http://ec2.images-amazon.com/images/P/0131857258.01._SCLZZZZZZZ_V46809707_AA240_.jpg" align="left" border="0" /></font></a>Robert Martin has a great book here.&nbsp; I just finished reading Agile Principle, Patterns, and Practices in C# (what a mouthful!).&nbsp; </font></div><div dir="ltr"><font face="Trebuchet MS" size="2"></font>&nbsp;</div><div dir="ltr"><font face="Trebuchet MS" size="2">In this book you get a fantastic play-by-play of a typical TDD/pairing session, which I think is a great way to demonstrate the process.&nbsp; </font></div><div dir="ltr"><font face="Trebuchet MS" size="2"></font>&nbsp;</div><div dir="ltr"><font face="Trebuchet MS" size="2">This was also the book that really got me to appreciate UML for what it is.&nbsp; I'm typically the guy who knows the UML basic shapes, and draws a bunch of interconnected rectangles on a whiteboard to help me solve problems.&nbsp; I was never a "fan" of UML because I always associated it with the monolithic CASE tools that use UML as the source for an architecture, and out spits generated code.&nbsp; </font><font face="Trebuchet MS" size="2">The book described what Martin feels are the essential (read: useful)&nbsp;components of UML and really abandons the rest.&nbsp; He emphasizes throwing away your diagrams when you're done and encourages writing them on a napkin or a whiteboard, which is infinitely faster than, say, Visio.</font></div><div dir="ltr"><font face="Trebuchet MS" size="2"></font>&nbsp;</div><div dir="ltr"><font face="Trebuchet MS" size="2">The section on patterns is well written, and it is always nice to get refreshers on patterns that you might not know about&nbsp;or haven't used recently.&nbsp; Again he emphasizes not to go crazy with patterns.&nbsp; They are there when they help, but don't be shy about throwing them out when they complicate things.&nbsp; Indeed, this book is agile.</font></div><div dir="ltr"><font face="Trebuchet MS" size="2"></font>&nbsp;</div><div dir="ltr"><font face="Trebuchet MS" size="2">The final section (or rather 1/3 of the book!) goes about a payroll system.&nbsp; He does a bit of UML to get the basic idea in his head and then he goes straight to the tests.&nbsp; He fleshes out the entire thing, right there in the text.&nbsp; The model changes, the tests drive the design and behavior, and he frequently consults with his "Customer" (himself) over what the requirements are.&nbsp; After he has a working model that is fully tested, he bolts on persistence using a custom ADO.NET pproach, which is difficult.&nbsp; Seeing him do this reminds me of how I like to use NHibernate, but I found it difficult to repeat this approach using flat ADO.NET calls. </font></div><div dir="ltr"><font face="Trebuchet MS" size="2"></font>&nbsp;</div><div dir="ltr"><font face="Trebuchet MS" size="2">I'm thoroughly impressed with this book.&nbsp; If any of the topics above interest you, then <a title="amazon" href="http://www.amazon.com/Principles-Patterns-Practices-Robert-Martin/dp/0131857258" target="_blank">go pick it up</a>!</font></div>
