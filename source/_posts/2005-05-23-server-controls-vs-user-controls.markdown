--- 
layout: post
title: Server controls vs. User Controls
date: 2005-5-23
comments: true
link: false
---
<div style="clear:both;"></div>I ran across an interesting problem today, and I'm surprised that I have never read anything online or in ASP.NET books on the topic.<br /><br />Basically I created a Wizard Control that will facilitate the common UI task of separating a long task into steps. The idea of a Wizard with Next/Previous buttons has been a foundation of windows applications since the beginning. Providing a similar interface for the web can help a lot.<br /><br />The control provides a table that looks like this:<br /><table border="0" cellspacing="0" width="300"><br /><tbody><tr><br /><td align="center" bgcolor="Tan"><b>Header</b></td><br /></tr><br /><tr><br /><td align="right" bgcolor="Gray"><i>Step 1 of 5</i></td><br /></tr><br /><tr><br /><td align="center">Content goes here...</td><br /></tr><br /><tr><br /><td align="center" nowrap="nowrap"><input value="Previous" enabled="false" type="button"> <input value="Next" type="button"> <input value="Cancel" type="button"><br /></td></tr><br /></tbody></table>so I have the control developed, all is well, the html looks all nice and neat like this:<br /><br /><div id="code"><br />&lt;cc1:Wizard id="wizard1" runat="server" HeaderText="New User"&gt;<br />&lt;cc1:WizardStep id="step1" runat="server" ValidationGroup="step1Group"&gt;<br />I am inside step 1!!!<br />&lt;/cc1:WizardStep&gt;<br />&lt;/cc1:Wizard&gt;<br /><br /></div><br /><br />Now what if I wanted to encapsulate some of the controls in step1 into it's own user control? Sounds like it would tidy things up a bit. So I did this, and everything was okay. Until I wanted to make each ascx file in charge of validating and saving itself...<br /><br />So I decide to instead, derive from FoundationWizardStep in the ascx code-behind. This way I could provide a couple public properties and method for validating and saving the form fields. This gives you an error though, because you cannot make a user control (one with an ascx file) derive from System.Web.UI.Control. Instead it must derive from System.Web.UI.UserControl. What's the difference, you ask? Well I suppose the it takes some extra steps in rendering to allow for rich designer support, but aside from that? Not much.<br /><br />Now if I make FoundationWizardStep in turn derive from UserControl, I get even more weird behavior. I get a run-time exception in the html that the FoundationWizard doesn't have a child property of type FoundationWizardStep...<br /><br />Now I have resolved the problem by eliminating the ascx control and making it a complete server control (class only). Anyone have ideas as to why this happened?<div style="clear:both; padding-bottom: 0.25em;"></div>
