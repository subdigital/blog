--- 
layout: post
title: Developing for a Domain Environment
date: 2006-3-8
comments: true
link: false
---
<p>Internal applications commonly utilize Active Directory to manage their user-base.&nbsp; With this approach organizations can define the users and roles in one central location, and have that information available to many applications.</p><p>For intranet websites, this is accomplished by using Integrated Windows Authentication.&nbsp; But what happens when you are developing on a machine that does not have the same accounts as the target environment?&nbsp; Case in point:&nbsp; say you have some Active Directory&nbsp;domain groups that define who the &ldquo;readers&rdquo; of an appliciation are and who the &ldquo;editors&rdquo; are.&nbsp; The simple&nbsp;solution is to make these groups configurable through the web.config, and you can have something like this for development:</p>{% codeblock %}&lt;add key=&rdquo;adminRole&rdquo; value=&rdquo;Administrators&rdquo; /&gt;{% endcodeblock %}and something like this for production: {% codeblock %}&lt;add key=&rdquo;adminRole&rdquo; value=&rdquo;DOMAIN\ApplicationAdmins&rdquo; /&gt;{% endcodeblock %}<p>This gives us the benefit of using a local machine account for debugging the different roles, and allows for Integrated Windows Authentication to work properly.</p><p>Here&rsquo;s another concern.&nbsp; What if your code accesses a secure resource like a database or web service that requires valid Windows credentials and authorization?&nbsp; A test database can easily be configured to accept SQL Authentication provided via connection string, but a Web Service that requires integrated Windows authentication?&nbsp; Would you really want to mock a complex external dependency like this (Especially if it is a <em>read-only</em> dependency) ??&nbsp; If you do you end up spending a large portion of your time just setting up the environment to develop in.&nbsp; </p><p>I was dealing with a scenario just like this and I wanted to do use the web.config&rsquo;s <strong>impersonate=&rdquo;true&rdquo;<em> </em></strong>feature where I can supply a username &amp; password to run as (You can even configure it to encrypt this data and store it in the registry using aspnet_setreg.exe&hellip; see <a title="MSDN - aspnet_setreg.exe" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;329290" target="_blank">here</a>).&nbsp; The problem here is that if I give it&nbsp;a valid domain account to impersonate, my local machine cannot authenticate me unless I join the computer to a domain.&nbsp; For a lot of scenarios this is way too much to ask, and may&nbsp;not even be an option.</p><p>I could end up just constructing a NetworkCredentials object with the credentials I need to access the secure web service, but I don&rsquo;t like that approach either.&nbsp; It requires me to specify an account in plain text (either in code or in web.config&hellip; both of which are bad ideas.</p><p>Any thoughts on this?</p>
