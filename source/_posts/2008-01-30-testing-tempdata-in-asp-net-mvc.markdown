--- 
layout: post
title: Testing TempData in ASP.NET MVC
date: 2008-1-30
comments: true
link: false
---
<p>Eventually when testing your controllers you will come across an action that sets TempData.</p><p>If you didn’t know, TempData is a session-backed temporary storage dictionary that is available for one single request.&nbsp; It’s great to pass messages between controllers.</p><p>Our Controller classes that we derive from have this as a member property.&nbsp; However, when testing the controller, this always came up as null.</p><p>Reflector is our friend here, so I fired it up and loaded the Controller class.&nbsp; Then I located the TempData member, and looked at the setter.&nbsp; It’s marked as internal, so somebody inside this assembly is responsible for creating it.&nbsp; By using the Reflector Analyze feature, I was able to find exactly where the setter is called.&nbsp; It’s in the Execute() method.&nbsp; (this is the general “pipeline” method that all `IController` implementations must override)</p><p>Think about that for a second.&nbsp; At runtime, the TempData dictionary is set because all requests flow through `Execute()`.&nbsp; But in my test, I am specifically calling my action method.&nbsp; There is no `Execute()` in my test.</p><p>To top it off, I can’t set this guy to a new TempDataDictionary because the setter is marked as internal.</p><p><a href="http://haacked.com/" target="_blank">Phil Haack</a> tells me they’re working on this issue so we’ll likely see an improvement soon.&nbsp; In the meantime you can get around the issue by using reflection to set the value.&nbsp; But first, can we create one?</p><p>TempData is stored in session, so it needs a reference to IHttpContext.&nbsp; Thankfully, we can mock this, however we have to make sure and mock the right parts.</p><p>First, create a mock for IHttpContext, create the return values for mocked IHttpRequest &amp; IHttpResponse.&nbsp; Finally setup return values for IHttpSession as well.&nbsp; I’ve done all of this in a helper method of my test (though it could be an extention method on the MockRepository ala Phil, but whatever you like).</p><p>``</p>{% codeblock %}private IHttpContext GetHttpContext(string requestUrl){	IHttpRequest request = _mocks.DynamicMock&lt;IHttpRequest&gt;();	SetupResult.For(request.Url).Return(new Uri(requestUrl));	IHttpResponse response = _mocks.DynamicMock&lt;IHttpResponse&gt;();	IHttpSessionState session = _mocks.DynamicMock&lt;IHttpSessionState&gt;();IHttpContext httpContext = _mocks.DynamicMock&lt;IHttpContext&gt;();	SetupResult.For(httpContext.Session).Return(session);	SetupResult.For(httpContext.Request).Return(request);	SetupResult.For(httpContext.Response).Return(response);_mocks.Replay(request);_mocks.Replay(response);_mocks.Replay(httpContext);<br><br>_tempData = new TempDataDictionary(httpContext);<br>SetupResult.For(session[null]).IgnoreArguments().Return(_tempData);			<br>_mocks.Replay(session);<br><br> &nbsp;return httpContext;}{% endcodeblock %}<p></p><p>This code is a little verbose, but this is something you write once and use in all of your tests. You should notice that the `_tempData` property is a local field on my test class. I can then take this `_tempData` variable and inject it (via reflection) onto the controller under test. Here's how:</p>``{% codeblock %}typeof(FooController).GetProperty("TempData").SetValue(controller, _tempData, null);{% endcodeblock %}<p>And now we can easily test that messages are set in TempData before redirecting or rendering a view.</p><p><b>*update*:&nbsp; Will Shaver notified me of a typo in the code.&nbsp; It has been fixed.&nbsp; Thanks Will!*</b><br></p>
