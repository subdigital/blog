--- 
layout: post
title: Writing a Simple Image Editor in CAB - Part 3
date: 2007-3-13
comments: true
link: false
---
<p><a href="http://www.flux88.com/2007/03/09/Writing+A+Simple+Image+Editor+In+CAB++Part+2.aspx">Last time</a> I left off with a working shell, and we loaded a single module into the shell.&nbsp; In this article we&rsquo;ll cover:</p><ul><li>Raising and handling events</li><li>Invoking and handling commands</li><li>Adding dynamic items to a UIExtensionSite (our menu)</li></ul><p>We have the ability to display the image, but we need to be able to load the image from somewhere.&nbsp; </p><p>I created another WorkItem called ImageSelectionWorkItem.&nbsp; This workitem will be responsible for loading an image and raising an event that it occurred.</p><div style="FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="COLOR: blue">using</span> System;</p><p style="MARGIN: 0px"><span style="COLOR: blue">using</span> Microsoft.Practices.CompositeUI;</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px"><span style="COLOR: blue">namespace</span> ImageDisplayModule.WorkItems.Selection</p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: teal">ImageSelectionWorkItem</span> : <span style="COLOR: teal">WorkItem</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">private</span> <span style="COLOR: teal">ImageSelectionView</span> _view;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">private</span> <span style="COLOR: teal">ImageSelectionPresenter</span> _presenter;</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">protected</span> <span style="COLOR: blue">override</span> <span style="COLOR: blue">void</span> OnRunStarted()</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">base</span>.OnRunStarted();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//create &amp; wire up presenter</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _presenter = <span style="COLOR: blue">this</span>.Items.AddNew&lt;<span style="COLOR: teal">ImageSelectionPresenter</span>&gt;();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//create the view</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _view = <span style="COLOR: blue">new</span> <span style="COLOR: teal">ImageSelectionView</span>(_presenter);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//run the view</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _view.Show();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">}</p></div><!--EndFragment--><p>This code here is just wiring up the view and presenter so that they can communicate.&nbsp; Take note on the line where we call this.Items.AddNew&lt;&gt;.&nbsp; This will instantiate the type provided and add it to the items collection of the WorkItem.&nbsp; It is important to belong to this collection if you are going to participate in any handle or raise any CAB events or commands.&nbsp; Our presenter is going to raise an event, so it needs to be added to the Items collection of the WorkItem.</p><p>Here is the presenter:</p><div style="FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: teal">ImageSelectionPresenter</span></p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; [<span style="COLOR: teal">EventPublication</span>(<span style="COLOR: teal">ModuleConstants</span>.<span style="COLOR: teal">Events</span>.ImageLoaded, <span style="COLOR: teal">PublicationScope</span>.Global)]</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">event</span> <span style="COLOR: teal">EventHandler</span>&lt;<span style="COLOR: teal">DataEventArgs</span>&lt;<span style="COLOR: teal">Bitmap</span>&gt;&gt; ImageLoaded;</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">void</span> OnFileSelected(<span style="COLOR: blue">string</span> filename)</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">if</span> (ImageLoaded != <span style="COLOR: blue">null</span>)</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">Image</span> img = <span style="COLOR: teal">Image</span>.FromFile(filename);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">Bitmap</span> bmp = <span style="COLOR: blue">new</span> <span style="COLOR: teal">Bitmap</span>(img);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ImageLoaded(<span style="COLOR: blue">this</span>, <span style="COLOR: blue">new</span> <span style="COLOR: teal">DataEventArgs</span>&lt;<span style="COLOR: teal">Bitmap</span>&gt;(bmp));</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">}</p></div><p><!--EndFragment--><br />The view is going to call this function when the user selects a file, and the presenter will raise a global CAB event.&nbsp; I defined the event name as a constant so that it can be safely referred to throughout the module.</p><p>The view isn&rsquo;t actually a User Control.&nbsp; It&rsquo;s just a class that opens a windows forms dialog for opening the file:</p><div style="FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: teal">ImageSelectionView</span></p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">private</span> <span style="COLOR: teal">ImageSelectionPresenter</span> _presenter; </p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> ImageSelectionView(<span style="COLOR: teal">ImageSelectionPresenter</span> presenter)</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; _presenter = presenter;</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">void</span> Show()</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">using</span> (<span style="COLOR: teal">OpenFileDialog</span> fileDlg = <span style="COLOR: blue">new</span> <span style="COLOR: teal">OpenFileDialog</span>())</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fileDlg.Filter = <span style="COLOR: maroon">"Picture files (*.gif; *.jpg; *.bmp; *.png)|*.gif;*.png;*.bmp;*.jpg"</span>;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">DialogResult</span> result = fileDlg.ShowDialog();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">if</span> (result == <span style="COLOR: teal">DialogResult</span>.OK)</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp
; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OnFileSelected(fileDlg.FileName);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">void</span> OnFileSelected(<span style="COLOR: blue">string</span> filename)</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; _presenter.OnFileSelected(filename);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">}</p></div><p>This class focuses on the UI only, the decision on what to do is provided through the presenter.</p><p>So now that we have this WorkItem completed, we need a way to call it!&nbsp; To facilitate this, we&rsquo;ll load up an &ldquo;Open image&rdquo; menu option and load our work item when this is clicked.</p><p>Our application (the shell) has to expose the menu as a UI Extension site.&nbsp; In order to do this, we need to register it.&nbsp; So, in our ImageEditorApplication class:</p><div style="FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="COLOR: blue">protected</span> <span style="COLOR: blue">override</span> <span style="COLOR: blue">void</span> AfterShellCreated()</p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">base</span>.AfterShellCreated();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">this</span>.RootWorkItem.UIExtensionSites.RegisterSite(<span style="COLOR: maroon">"MainMenuStrip"</span>, <span style="COLOR: blue">this</span>.Shell.MainMenuStrip.Items);</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">this</span>.RootWorkItem.UIExtensionSites.RegisterSite(<span style="COLOR: maroon">"FileMenu"</span>, <span style="COLOR: blue">this</span>.Shell.FileMenu.DropDownItems);</p><p style="MARGIN: 0px">}</p></div><!--EndFragment--><p>I registered the top-level menu as well as the File menu so we can append to it.&nbsp; <em>(Notice how I added the DropDownItems collection, rather than the item itself.&nbsp; If I don&rsquo;t&nbsp;do this then Items will be added as top level items, not children.&nbsp; This took me a while to figure out&hellip;)</em></p><p>The next step is to find the well-known UI Extension Site for the menu (I called it &ldquo;FileMenu&rdquo;) and add our menu item to it (from the Module).&nbsp; The reason this looks indirect is because <em>CAB applications are, by nature, loosely-coupled.</em>&nbsp; This is a good thing.</p><p>Our module init class now looks like this:</p><div style="FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span> <span style="COLOR: teal">ImageDisplayModuleInit</span> : <span style="COLOR: teal">ModuleInit</span></p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">private</span> <span style="COLOR: teal">WorkItem</span> _rootWorkItem;</p><p style="MARGIN: 0px">&nbsp; &nbsp; [<span style="COLOR: teal">ServiceDependency</span>]</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: teal">WorkItem</span> RootWorkItem</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">get</span> { <span style="COLOR: blue">return</span> _rootWorkItem; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">set</span> { _rootWorkItem = <span style="COLOR: blue">value</span>; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">override</span> <span style="COLOR: blue">void</span> Load()</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">base</span>.Load();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//create workitem(s)</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">DisplayImageWorkItem</span> wi = RootWorkItem.WorkItems.AddNew&lt;<span style="COLOR: teal">DisplayImageWorkItem</span>&gt;();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//modify the ui extension sites</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; CreateMenuItems();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//run the workitem</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; wi.Run();</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">private</span> <span style="COLOR: blue">void</span> CreateMenuItems()</p><p style="MARGIN: 0px">&nbsp; &nbsp; {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//creat file-&gt;open menu item &amp; register click command invoker</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">ToolStripMenuItem</span> fileOpen = <span style="COLOR: blue">new</span> <span style="COLOR: teal">ToolStripMenuItem</span>(<span style="COLOR: maroon">"Open Image"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; RootWorkItem.Commands[<span style="COLOR: teal">ModuleConstants</span>.<span style="COLOR: teal">Commands</span>.LoadImage].AddInvoker(fileOpen, <span style="COLOR: maroon">"Click"</span>); </p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: green">//add it to the file menu</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">UIExtensionSite</span> site = RootWorkItem.UIExtensionSites[<span style="COLOR: maroon">"FileMenu"</span>];&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; site.Add&lt;<span style="COLOR: teal">ToolStripMenuItem</span>&gt;(fileOpen);</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; [<span style="COLOR: teal">CommandHandler</span>(<span style="COLOR: teal">ModuleConstants</span>.<span style="COLOR: teal">Commands</span>.LoadImage)]</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">void</span> LoadImage(<span style="COLOR: blue">object</span> sender, <span style="COLOR: teal">EventArgs</span> e)</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">string</span> id = <span style="COLOR: maroon">"LoadImageWorkItem"</span>;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: teal">ImageSelectionWorkItem</span> wi;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">if</span> (RootWorkItem.WorkItems.Contains(id))</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wi = RootWorkItem.WorkItems[id] <span style="COLOR: blue">as</span> <span style="COLOR: teal">ImageSelectionWorkItem</span>;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="COLOR: blue">else</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wi = RootWorkItem.WorkItems.AddNew&lt;<span style="COLOR: teal">Image
SelectionWorkItem</span>&gt;(id);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; wi.Run();</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">}</p></div><!--EndFragment--><p>There is a lot going on here, so I&rsquo;ll take it in pieces.&nbsp; First off, we added a call to CreateMenuItems().&nbsp; This method will be responsible for loading any menu items required by its work items.&nbsp;&nbsp; We create our menu item for &ldquo;Open Image&rdquo; and add it&rsquo;s click event as a <em>Command Invoker</em>.&nbsp; This is very similar to wiring up events.</p><p>We also have a method decorated with the CommandHandler attribute.&nbsp; This is the handler for when the menu item is clicked.&nbsp; It&rsquo;s purpose is to create and launch the new image selection work item.</p><p>So if we can recap for a moment, our module loads, it stuffs in a new menu item into the File menu.&nbsp; The user clicks this, which invokes a command called &ldquo;LoadImage&rdquo;.&nbsp; A Command Handler picks this up and launches the ImageSelectionWorkItem.&nbsp; It will display an open file dialog where the user can select an image.&nbsp; Once the image is selected, an event is published.&nbsp; We currently have a subscriber to this event, and it&rsquo;s job is to load the selected image into the display work item.</p><p>If we run the application, we can now browse for an image, select it, and it loads onto our canvas:</p><p><img src="/images/CropperCapture%5B48%5D_small_.jpg" alt="Our new menu item, loaded into the UI Extension site"  border="1"  /></p><p><img src="/images/CropperCapture%5B49%5D_small_.jpg" alt="CropperCapture[49]"  border="1"  /></p><p>So at this point we&rsquo;ve touched on most of the CAB concepts.&nbsp; Next we&rsquo;ll introduce another module for Filtering the image, kind of like a mini-photoshop (maybe that&rsquo;s going too far, but you get the idea&hellip;).</p><p>Until next time!</p>
