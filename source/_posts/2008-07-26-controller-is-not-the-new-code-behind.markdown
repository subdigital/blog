--- 
layout: post
title: Controller is NOT the New Code-Behind
date: 2008-7-26
comments: true
link: false
---
<p>One of the things that I often say when touting the benefits of ASP.NET MVC is clean separation of concerns.&#160; I talk about how the code-behind of WebForms is just <em>begging</em> you to put code there.&#160; Samples online frequently open direct database connections and execute ad-hoc queries against the database from a button-click event.</p><p>Of course the same is possible with ASP.NET MVC.&#160; Just taking a peak at the new Preview 4 installer, you’ll see a brand-spanking new AccountController, pre-built for managing logins/membership on your site.</p><p>Open AccountController.cs and you’ll find this method:</p>{% codeblock %}[Authorize]<span class="kwrd">public</span> ActionResult ChangePassword(<span class="kwrd">string</span> currentPassword, <span class="kwrd">string</span> newPassword, <span class="kwrd">string</span> confirmPassword){ViewData[<span class="str">&quot;Title&quot;</span>] = <span class="str">&quot;Change Password&quot;</span>;ViewData[<span class="str">&quot;PasswordLength&quot;</span>] = Provider.MinRequiredPasswordLength;<span class="rem">// Non-POST requests should just display the ChangePassword form </span><span class="kwrd">if</span> (Request.HttpMethod != <span class="str">&quot;POST&quot;</span>){<span class="kwrd">return</span> View();}<span class="rem">// Basic parameter validation</span>List&lt;<span class="kwrd">string</span>&gt; errors = <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;();<span class="kwrd">if</span> (String.IsNullOrEmpty(currentPassword)){errors.Add(<span class="str">&quot;You must specify a current password.&quot;</span>);}<span class="kwrd">if</span> (newPassword == <span class="kwrd">null</span> || newPassword.Length &lt; Provider.MinRequiredPasswordLength){errors.Add(String.Format(CultureInfo.InvariantCulture, <span class="str">&quot;You must specify a new password of {0} or more characters.&quot;</span>, Provider.MinRequiredPasswordLength));}<span class="kwrd">if</span> (!String.Equals(newPassword, confirmPassword, StringComparison.Ordinal)){errors.Add(<span class="str">&quot;The new password and confirmation password do not match.&quot;</span>);}<span class="kwrd">if</span> (errors.Count == 0){<span class="rem">// Attempt to change password</span>MembershipUser currentUser = Provider.GetUser(User.Identity.Name, <span class="kwrd">true</span> <span class="rem">/* userIsOnline */</span>);<span class="kwrd">bool</span> changeSuccessful = <span class="kwrd">false</span>;<span class="kwrd">try</span>{changeSuccessful = currentUser.ChangePassword(currentPassword, newPassword);}<span class="kwrd">catch</span>{<span class="rem">// An exception is thrown if the new password does not meet the provider's requirements</span>}<span class="kwrd">if</span> (changeSuccessful){<span class="kwrd">return</span> RedirectToAction(<span class="str">&quot;ChangePasswordSuccess&quot;</span>);}<span class="kwrd">else</span>{errors.Add(<span class="str">&quot;The current password is incorrect or the new password is invalid.&quot;</span>);}}<span class="rem">// If we got this far, something failed, redisplay form</span>ViewData[<span class="str">&quot;errors&quot;</span>] = errors;<span class="kwrd">return</span> View();}{% endcodeblock %}<p>That’s nearly 70 lines in a single method.&#160; Even with the comments it’s difficult to see what it’s doing at a glance.</p><p>This serves as a lesson to those of us that sell TDD as a design practice.&#160; Sure this method is testable, but it seems as though the author did not take a few minutes to refactor code.&#160; Normally I wouldn’t pick on someone for writing this, but when this is installed as a project template, it serves as an example for others to write code just like this.</p><p>Let’s see how we might clean this code up to make it more readable.</p><p>Here’s a good first attempt.&#160; This took all of about 5 minutes to accomplish.</p>{% codeblock %}[Authorize]<span class="kwrd">public</span> ActionResult ChangePassword(<span class="kwrd">string</span> currentPassword, <span class="kwrd">string</span> newPassword, <span class="kwrd">string</span> confirmPassword){ViewData[<span class="str">&quot;Title&quot;</span>] = <span class="str">&quot;Change Password&quot;</span>;ViewData[<span class="str">&quot;PasswordLength&quot;</span>] = Provider.MinRequiredPasswordLength;<span class="rem">// Non-POST requests should just display the ChangePassword form </span><span class="kwrd">if</span> (Request.HttpMethod != <span class="str">&quot;POST&quot;</span>){<span class="kwrd">return</span> View();}var errors = <span class="kwrd">new</span> List&lt;<span class="kwrd">string</span>&gt;();ValidatePassword(currentPassword, newPassword, confirmPassword, errors);<span class="kwrd">if</span> (errors.Count == 0){<span class="kwrd">const</span> <span class="kwrd">bool</span> isOnline = <span class="kwrd">true</span>;var currentUser = Provider.GetUser(User.Identity.Name, isOnline);<span class="kwrd">if</span>( PerformPasswordChange(currentUser, currentPassword, newPassword)){<span class="kwrd">return</span> RedirectToAction(<span class="str">&quot;ChangePasswordSuccess&quot;</span>);}errors.Add(<span class="str">&quot;The current password is incorrect or the new password is invalid.&quot;</span>); }<span class="rem">// If we got this far, something failed, redisplay form</span>ViewData[<span class="str">&quot;errors&quot;</span>] = errors;<span class="kwrd">return</span> View();}<span class="kwrd">private</span> <span class="kwrd">bool</span> PerformPasswordChange(MembershipUser user, <span class="kwrd">string</span> currentPassword, <span class="kwrd">string</span> newPassword){<span class="kwrd">try</span>{user.ChangePassword(currentPassword, newPassword);<span class="kwrd">return</span> <span class="kwrd">true</span>;}<span class="kwrd">catch</span>{<span class="kwrd">return</span> <span class="kwrd">false</span>;}}<span class="kwrd">private</span> <span class="kwrd">void</span> ValidatePassword(<span class="kwrd">string</span> currentPassword, <span class="kwrd">string</span> newPassword, <span class="kwrd">string</span> confirmPassword, ICollection&lt;<span class="kwrd">string</span>&gt; errors){<span class="kwrd">if</span> (String.IsNullOrEmpty(currentPassword)){errors.Add(<span class="str">&quot;You must specify a current password.&quot;</span>);}<span class="kwrd">if</span> (newPassword == <span class="kwrd">null</span> || newPassword.Length &lt; Provider.MinRequiredPasswordLength){errors.Add(String.Format(CultureInfo.InvariantCulture,<span class="str">&quot;You must specify a new password of {0} or more characters.&quot;</span>,Provider.MinRequiredPasswordLength));}<span class="kwrd">if</span> (!String.Equals(newPassword, confirmPassword, StringComparison.Ordinal)){errors.Add(<span class="str">&quot;The new password and confirmation password do not match.&quot;</span>);}}{% endcodeblock %}<p>This code (while still completely in the controller class) is broken apart into distinct methods.&#160; This reduces the line count on the action method to 26, which is much easier to swallow.&#160; I’m sure you see even more opportunities for improvement here.&#160; Some of this code probably belongs in another, completely separate class (one that is even more easily tested that this).</p><p>My point is, always remember to include time for refactoring.&#160; Especially when the result of your work will stand for thousands to learn from.</p>
