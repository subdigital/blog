--- 
layout: post
title: Case Insensitive String Comparison is Teh Suck
date: 2008-2-29
comments: true
link: false
---
Why is it so verbose to compare two strings in C# and see if they are equal, while ignoring case?<br><br>What I mean is this:&nbsp; <b><i>("Apples" == "apples")&nbsp; =&gt; false</i></b><br><br>Take the following examples, each of which does what I want it to, however <b>there is so much noise code here</b> that it really takes away from the readability of the code:<br><br>{% codeblock %}<span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;">Assert.That(matches[0].Email.Equals(email, StringComparison.InvariantCultureIgnoreCase));<br>Assert.That(matches[0].Email.ToLower().Equals(email.ToLower()));<br>Assert.That(<span style="color: Blue; background-color: transparent; font-family: Courier New; font-size: 11px;">string</span>.Compare(matches[0].Email, email) == 0);<br>Assert.That(Regex.Match(matches[0].Email, email, RegexOptions.IgnoreCase).Success);</span>{% endcodeblock %}<br>Each one of these works, but I really wish this was a language feature.&nbsp; Wouldn't it be nice to have a new operator syntax?<br>{% codeblock %}<span style="color: Black; background-color: transparent; font-family: Courier New; font-size: 11px;">Assert.That(matches[0].Email ==? email);<br>//or<br>Assert.That(matches[0].Email ==~ email);</span>{% endcodeblock %}<b>It turns out that we're not alone.</b>&nbsp; Ruby and Python have the same problem, however their regular expressions option is much more elegant looking (due to the languages having regex as a core feature).&nbsp; This seems like such a common need that I'm surprised that this type of thing isn't built into the core of most languages.<br><br>Granted, there are concerns about how each one of these would behave, for example, how do you compare strings from two different cultures?&nbsp; In my case I'm always dealing with English characters, but I fully understand the need to support internationalization.<br><br>What do you think?&nbsp; Would you welcome a new operator to save your self some typing and improve readability?<br><p></p>
