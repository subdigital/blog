--- 
layout: post
title: Using ASP.NET MVC on IIS 6 without the .MVC Extension
date: 2008-5-27
comments: true
link: false
---
<p>One awesome features of ASP.NET MVC is the clean URLs.&nbsp; If you aren't familiar with them, here is a sample:</p> <blockquote> <p>/products/list</p> <p>(versus a typical /ProductList.aspx)</p></blockquote> <p>The default route for ASP.NET MVC looks like this:</p> <blockquote> <p>/{controller}/{action}</p></blockquote> <p>Using this route you can map most of the URLs that your application will need.&nbsp; There is a problem, however, when running ASP.NET MVC on IIS6 (and 5).&nbsp; The URL above doesn't have an extension, so IIS will assume that it is a virtual directory on the server.&nbsp; We have a couple of options we can do to get around this:</p> <ul> <li>We could create wild card mappings and pass every request through ASP.NET, however this is not recommended for performance reasons<li>We can add an extension that maps to ASP.NET (.mvc)</li></ul> <p>In the latter option your routes must change to something like this:</p> <blockquote> <p>/{controller}.mvc/{action}</p></blockquote> <p>So URLs generated with this route will look like:</p> <blockquote> <p>/products.mvc/list</p></blockquote> <p>...which basically reverts our clean urls into, well... less clean ones.</p> <p>So if you want to deploy to Windows Server 2003 &amp; IIS 6, you're out of luck.&nbsp; Well, mostly...</p> <h2>URL Rewriting to the Rescue</h2> <p>We can leverage an ISAPI filter to rewrite URLs which will allow us to have the nice URLs while still on IIS 6.&nbsp; There are 2 major products that do this for IIS:</p> <ul> <li><a href="http://www.isapirewrite.com/" target="_blank">ISAPI Rewrite</a> ($99)<li><a href="http://cheeso.members.winisp.net/IIRF.aspx" target="_blank">Ionic's ISAPI Rewrite Filter</a> (Free)</li></ul> <p>ISAPI Rewrite is the more mature of the two, however it's not free.&nbsp; They do provide a free version, but it doesn't support regular expressions, so it's pretty useless.</p> <p>Jeff Atwood has <a href="http://www.codinghorror.com/blog/archives/000797.html" target="_blank">a nice write-up of these two utilities</a>.&nbsp; In it he notes that the syntax for Ionic's ISAPI Rewrite is a little stranger and doesn't support the regex that we're all used to (since it uses a C regex library, not a .NET one).</p> <p>I decided to choose Ionic's because it was free, however there was a lack of information on how to structure URLs, and it required a lot of trial and error to get it working.&nbsp; Luckily they have an automatic logging facility that tells you how the rules are matching up.</p> <p>For ASP.NET MVC, I needed to cover these cases:</p> <ul> <li><strong>A request for / should be redirected to /home</strong><br><em>This isn't really required, as .NET can do this for me, however I wanted to ensure that all entry points are at the same URL to avoid Page Rank issues.&nbsp; (See the same Atwood post for information on how important this is)</em><li><strong>A request for /something should be rewritten to /something.mvc<br></strong><em>That is, the user will request it without an extension, but the filter will rewrite it without the user's address bar ever changing.</em><li><strong>A request for /something/index should be rewritten to /something.mvc/index<br></strong><em>Just making sure that URLs with actions get the extension only on the first part</em><li><strong>The content directory that contains our javascript, CSS, and images should be excluded from the above rule<br></strong><em>Otherwise we'd have /content.mvc/styles.css which would be interpreted as a controller, rather than a direct file request.</em></li></ul> <p>I found <a href="http://biasecurities.com/blog/2008/how-to-enable-pretty-urls-with-asp-net-mvc-and-iis6/" target="_blank">a good resource that outlined how to do this with ISAPI Rewrite</a>, however the rules were quite different with Ionic's.</p> <p>Here are my rules for Ionic's ISAPI Rewrite that works for ASP.NET MVC:</p>{% codeblock %}<strong># empty URL gets mapped to home controller <br>RewriteRule&nbsp; ^/$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /home [R] # map controller parts of urls to .mvc, ignoring the content directory<br>RewriteRule&nbsp; ^(?!/Content)(/[A-Za-z0-9_-]+)(/.*)?$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $1.mvc$2&nbsp; [I]</strong>{% endcodeblock %}<p>It turns out that I only need 2 rules to satisfy the above requirements.&nbsp; The first rule forces the browser to redirect, which will aid in making sure that I <a href="http://www.hanselman.com/blog/UsingISAPIRewriteToCanonicalizeASPNETURLsAndRemoveDefaultaspx.aspx" target="_blank">only have 1 entry point to my website</a>.</p><p>The 2nd rule takes the first part of the ULR and adds .mvc to it, appending the remaining verbatim (if any).&nbsp; It also excludes anything beginning with "content," so I'm free to put images, javascript, css, and other literal file resources there.</p><p>The last requirement is to define my routes with <strong>both</strong> .mvc and regular formats.&nbsp; The trick is to define them in the right order.</p><p>routes.MapRoute("basic", "{controller}/{action}", new { ... } );</p><p>routes.MapRoute("basic_mvc", "{controller}.mvc/{action}", new {...});</p><p>Doing this ensures that our .MVC routes will actually function, but when we ask the framework for a URL (such as with Url.Action() or Html.ActionLink) we are handed the extension-less route (since it is defined first).</p><h2>Route Testing is IMPORTANT</h2><p>I've said it before and I'll say it again.&nbsp; <strong>Route testing is important.&nbsp; </strong>A single tiny change can break an entire application.&nbsp; Applying automated tests is critical for any MVC application.&nbsp; Since deployment of an ASP.NET MVC application needs to be flexible, your application should function with either type of route (extensions or not) so that you have flexibility of deployment.</p><p>Hard coding a route in 1 single location will prevent you from doing this.&nbsp; Did I mention route testing is important?</p>
