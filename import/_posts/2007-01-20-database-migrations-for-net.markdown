--- 
layout: post
title: Database Migrations for .NET
date: 2007-1-20
comments: true
link: false
---
<p>In my search for the <em>one-command automated build</em>, I&rsquo;ve often stumbled upon how to deal with the database while writing code on a multi-developer project.</p><p>Most of us use source control, however only a small fraction of us actually store the database scripts in source control.&nbsp; This is a powerful tool that is often missed completely.</p><p>This is a development process I see frequently:</p><ul><li>get the latest version of the source from VSS</li><li>exclusively check-out the code files you need</li><li>make changes to the code and the database to enable your new features</li><li>check in the code once it is all done</li><li>do a sql compare to the dev/test databases to get a delta script</li><li>run the compare script in the test environment and deploy the project to test.</li></ul><p>There are a number flaws in this process, but it doesn&rsquo;t stop people from continuing along this path for an entire project.&nbsp; Rather than point out everything that scares me from that list, I&rsquo;ll focus on the database portion. </p><p>What&rsquo;s wrong with just making changes and then doing a SQL compare?&nbsp; Well, for starters&hellip; that compare script is used once and thrown away.&nbsp; It is never checked into source control.&nbsp; If we need to restore the state of an application as of 4 months ago, we can do it with the code, but not the database.&nbsp; The database only stays on the current version, and there&rsquo;s no going back.&nbsp; Another drawback is that the process is a manual one, and we want to get into automation.&nbsp; Lastly, SQL Compare (and SQL Delta) are both licensed tools, and not all of us can purchase them.&nbsp; At home I cannot justify the cost, so I am forced to come up with something else.</p><p>The Ruby on Rails community is lucky.&nbsp; Baked into the Rails framework is something called <em>migrations</em>.</p><p>Let&rsquo;s say you&rsquo;re on a ruby project for managing houses for sale.&nbsp; You get a new feature request where you want to know how many bathrooms a house has (strange request, huh?).&nbsp; You make the changes to model (adding a <em>bathrooms </em>property) but now you need the database to support it.&nbsp; So you type <em>rails script/generate migration Add_House_Bathrooms</em>.&nbsp; This will generate a ruby code file in the <strong>/</strong><em>project/db/migrations/xxx_Add_House_Bathrooms.rb </em>file.&nbsp; (the xxx will be replaced with sequential ordering, so rails knows what order to execute the migrations)&nbsp;Inside this file are 2 methods:&nbsp; <strong>up</strong> and <strong>down</strong>.&nbsp; This is, <em>how to I create the changes</em>, and <em>how do I remove the changes</em>.&nbsp; Inside these methods you can write code that adds and removes the column you want.</p><p>So then when you need to deploy, rails knows what version the database is on (by having a version table), and can apply the migrations since that version to bring the database up to speed with the code.&nbsp; If something goes wrong, it can roll the changes back to the original version (by using the <em>down</em> methods).</p><p>You can even create migrations that load dummy test data, or default values for static lookup tables.</p><p>It usually only takes a little while for a cool idea to make its way into the .NET world, and migrations are no exception.&nbsp; The Castle Project is a collection of many RoR-esque utilities packaged into one.&nbsp; One of those utilities is called Migrator, which lives in the Generator project.</p><p>To generate a migration, you type:</p><p><strong><em>generate migration Add_House_Bathrooms</em></strong></p><p>With this, you can enable this style of migration in .NET.&nbsp; You create migrations, these end up as C# code files in your db/migrations folder.&nbsp; The same concept applies.</p><p>The migrator is fairly young, but it was extracted from CastleContrib into the main Castle trunk, so that is a good sign that it is here to stay and will have active support.</p><p>When I have more time to play with this, I&rsquo;ll try and post a little demo.&nbsp; For now, check out the castle project at <a href="http://www.castleproject.org/">http://www.castleproject.org</a></p><p>What does your team do to manage database changes and enable versioning?</p>
