--- 
layout: post
title: The Battle of the Data Access Layers
date: 2005-8-16
comments: true
link: false
---
<p>I have heard so many discussions (read: arguments) about which DAL method is the best and nobody ever has a clear-cut case for all solutions.&nbsp; Previously I have sort of&nbsp; &ldquo;rolled my own&rdquo; data layer, with a simple helper class and some parametrized queries.&nbsp; This has slowly grown into a very lite version of the Data Access Application Block from Microsoft (which kinda makes me grin, b/c that wasn&rsquo;t the intent).</p><p>The last project I started used NHibernate.&nbsp; It really did make a lot of things easy, and definitely sped up development.&nbsp; I was a little weary of the learning curve (which only gets steeper the more complex your schema gets), but I eventually came up with a solid solution that has held up well.&nbsp; I did have to make certain design considerations using NHibernate, which I didn&rsquo;t like, but I got over it.</p><p>Anyway, I get to start fresh on a new project again and I&rsquo;m back at the same step:&nbsp; how should I shape my data layer?&nbsp; Should I use NHibernate again?&nbsp; Should I use CSLA.NET?</p><p>Here&rsquo;s what I am considering:</p><ul><li>My own hand-made DAL.</li><li>CSLA.NET</li><li>Use Enterprise Library (specifically the Data Access Application Block)</li><li>NHibernate </li></ul><p>Right now I&rsquo;m leaning toward CSLA, because I think it might integrate quite nicely with a large project we currently have, where the DAL it uses (well, only about 25% of the code even uses the middle tier) is sort of primitive. (anyway, don&rsquo;t get me started on this, it&rsquo;s a mess that needs to be cleaned up)</p><p>My goal is to provide a boilerplate DAL that ALL of our upcoming projects can utilize effectively (large or small).&nbsp; Any suggestions?</p>
