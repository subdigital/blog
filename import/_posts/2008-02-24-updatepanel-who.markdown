--- 
layout: post
title: UpdatePanel, Who?
date: 2008-2-24
comments: true
link: false
---
<p>I don&rsquo;t know why people are so enamoured with ASP.NET AJAX.&nbsp; Sure it works and is developed by Microsoft, but what&rsquo;s wrong with the dozen other alternatives out there?&nbsp; Many developers I talk to will say &ldquo;yeah I used Ajax on this&rdquo; (with a capital A) and what they are referring to is ASP.NET AJAX.&nbsp; While I don&rsquo;t think it is a <em>horrible</em> framework (I use it on occasion), I think it <em>is</em> too complicated and requires too much to get a simple example started.&nbsp; When people say they have ASP.NET AJAX experience, it means to me that they have experience with declarative controls and &lt;ScriptManager&gt; tags.&nbsp; It doesn&rsquo;t necessarily mean they know how ajax works <strong>and it definitely doesn&rsquo;t mean they know anything about javascript</strong>.&nbsp; This worries me.</p><p>I often talk about how awesome <a href="http://prototypejs.org/" target="_blank">prototype</a> is (and lately I&rsquo;ve been digging <a href="http://jquery.com/" target="_blank">jquery</a>) and inevitably someone tells me it&rsquo;s just eaiser to wrap your sections in an UpdatePanel and be done with it.&nbsp; It is sometimes hard to argue with that, even though it is the most inefficient way of doing ajax.&nbsp; In addition, this can cause side-effects in WebForms because the entire lifecycle is being executed, even though only part of the page is rendered.&nbsp; This method is actually called &ldquo;partial html replacement&rdquo; or &ldquo;partial page rendering&rdquo; and can be achieved easily without needing ASP.NET AJAX.</p><p>Now that ASP.NET MVC is out, which doesn&rsquo;t work with ASP.NET AJAX (not the full stack) people are foaming at the mouth for their UpdatePanel equivalent.&nbsp; (<em>I think we&rsquo;ll see an update for this in the coming weeks that will show ASP.NET AJAX working specifically in the MVC environment, but this point still stands.&nbsp; You don&rsquo;t have to use it.</em>)</p><p>I&rsquo;m going to use <a href="http://www.jquery.com/" target="_blank">jquery</a> in my sample, but the technique will apply to <a href="http://prototypejs.org/" target="_blank">prototype</a>, <a href="http://mochikit.com/" target="_blank">mochikit</a>, and others.&nbsp; In this sample we will take a functioning page and turn it into an ajax enabled page, while preserving the non-ajax scenario (if javascript is disabled).</p><p>For our example, I will borrow from an <a href="http://media.rubyonrails.org/video/flickr-rails-ajax.mov" target="_blank">impressive rails tutorial</a> [Quicktime] and implement the same thing in ASP.NET MVC.&nbsp; The&nbsp;basic concept is this:&nbsp;&nbsp;Search for flickr photos and display them on the page using ajax.&nbsp;</p><p>We have our page:</p><p><a href="http://www.flux88.com/uploads/photo_2Dsearch_2Dform.png"><img src="/images/photo_2Dsearch_2Dform_thumb.jpg" hspace="10"  border="0"  /></a></p><p>if you search for &ldquo;flowers&rdquo;, you are taken to another action (physically) that shows you the results:</p><p><a href="http://www.flux88.com/uploads/photo_2Dsearch_2Dresults.png"><img src="/images/photo_2Dsearch_2Dresults_thumb.jpg" hspace="10"  border="0"  /></a></p><p>Now let&rsquo;s assume that you want this to happen with ajax.&nbsp; We&rsquo;d like the results to be displayed directly on the same page as the query.</p><p>Here&rsquo;s the form from that first action:</p><p>{% codeblock %}<span class="kwrd">&lt;</span><span class="html">h1</span><span class="kwrd">&gt;</span>Photo Search<span class="kwrd">&lt;/</span><span class="html">h1</span><span class="kwrd">&gt;</span><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">class</span><span class="kwrd">="box"</span><span class="kwrd">&gt;</span><span class="kwrd">&lt;</span><span class="html">form</span> <span class="attr">id</span><span class="kwrd">="search-form"</span> <span class="attr">method</span><span class="kwrd">="get"</span> <span class="attr">action</span><span class="kwrd">="/photos/find"</span><span class="kwrd">&gt;</span> <span class="kwrd">&lt;</span><span class="html">label</span> <span class="attr">for</span><span class="kwrd">="query"</span><span class="kwrd">&gt;</span>Query:<span class="kwrd">&lt;/</span><span class="html">label</span><span class="kwrd">&gt;</span><span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="text"</span> <span class="attr">id</span><span class="kwrd">="query"</span> <span class="attr">name</span><span class="kwrd">="query"</span> <span class="kwrd">/&gt;</span><span class="kwrd">&lt;</span><span class="html">input</span> <span class="attr">type</span><span class="kwrd">="submit"</span> <span class="attr">id</span><span class="kwrd">="search"</span> <span class="attr">value</span><span class="kwrd">="search"</span> <span class="kwrd">/&gt;</span><span class="kwrd">&lt;</span><span class="html">img</span> <span class="attr">id</span><span class="kwrd">="indicator"</span> <span class="attr">style</span><span class="kwrd">="display:none"</span> <span class="attr">src</span><span class="kwrd">="../../content/load.gif"</span> <span class="attr">alt</span><span class="kwrd">="loading...."</span> <span class="kwrd">/&gt;</span><span class="kwrd">&lt;/</span><span class="html">form</span><span class="kwrd">&gt;</span><span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>{% endcodeblock %}<p>And the action that the form submits to:</p><p>{% codeblock %}[ControllerAction]<span class="kwrd">public</span> <span class="kwrd">void</span> Find(<span class="kwrd">string</span> query, <span class="kwrd">string</span> format){var flickr = <span class="kwrd">new</span> Flickr(ConfigurationManager.AppSettings[<span class="str">"flickr.api.key"</span>]); var photos = flickr.PhotosSearch(query, TagMode.AnyTag, query, 40, 1); ViewData[<span class="str">"query"</span>] = query; ViewData[<span class="str">"photos"</span>] = photos; RenderView(<span class="str">"results"</span>);}{% endcodeblock %}<p></p><p><em>(This uses the <a href="http://www.codeplex.com/FlickrNet" target="_blank">FlickrNet</a> library available on CodePlex)</em></p><p>In order to translate this into an ajax-enabled page (while preserving no-javascript behavior) we have to do 2 things.&nbsp; </p><ul><li>Prevent the form from posting, so that the browser doesn&rsquo;t take us off the page</li><li>Make the Find() action render <em>only</em> the partial html for the images (in the case of an ajax call</li></ul><p>Let&rsquo;s solve the first problem first.&nbsp; Using jquery, we can capture the form submit by doing this:</p>{% codeblock %}function init(){$(<span class="str">'#search-form'</span>).submit(function() {$(<span class="str">'#photos'</span>).hide();$(<span class="str">'#indicator'</span>).show();hijack(<span class="kwrd">this</span>, loadPhotos, <span class="str">"html"</span>), <span class="kwrd">return</span> <span class="kwrd">false</span>;});}$(document).ready(init);{% endcodeblock %}<p>When the document has been loaded, init() is called.&nbsp; This finds our form and adds an onsubmit handler to it.&nbsp; Next, we hide the photos div (in case there were pictures there already) and then we start the ajax indicator.&nbsp; <strong>For the love of all that is good and holy, let the user know that you&rsquo;re doing something!</strong>&nbsp; Ok next up is this strange hijack() function.&nbsp; This guy takes the form and submits it via ajax instead.&nbsp; It accepts the form, the method to call when the result comes back (callback), and the data type of the return value.&nbsp; Finally, to cancel the browser from actually submitting the form, we return false.</p><p>Here is that &ldquo;photos&rdquo; div I mentioned a second ago:&nbsp; <em>(I put this directly under our form)</em></p>{% codeblock %}<span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="photos"</span> <span class="attr">class</span><span class
="kwrd">="box"</span> <span class="attr">style</span><span class="kwrd">="display: none"</span><span class="kwrd">&gt;</span><span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>{% endcodeblock %}<p>It&rsquo;s initially hidden because it will be empty when the page physically loads.</p><p>hijack() is a generic javascript function, and&nbsp;is defined as:</p>{% codeblock %}function hijack(form, callback, <span class="kwrd">params</span>, format){ <span class="kwrd">try</span> {$.ajax({url:form.action,type: form.method,data: $(form).serialize() + <span class="str">"&amp;ajax=true"</span>,dataType: format,success:callback,failure:function(e) { alert(<span class="str">"error! "</span> + e); }});} <span class="kwrd">catch</span>(e) { alert(e);}}{% endcodeblock %}<p>This is pretty basic ajax stuff in jquery.&nbsp; The only thing different that I am doing here is notifying the controller that this is an ajax call, so that we may make it behave a little differently.&nbsp; After all, we don&rsquo;t want it to return a full html document&hellip; we only want the images!</p><p>That&rsquo;s the essense of issue #2.&nbsp; If we revisit our controller action, we can make the following change:</p>{% codeblock %}[ControllerAction]<span class="kwrd">public</span> <span class="kwrd">void</span> Find(<span class="kwrd">string</span> query, <b><span class="kwrd">bool</span>? ajax</b>){ var flickr = <span class="kwrd">new</span> Flickr(ConfigurationManager.AppSettings[<span class="str">"flickr.api.key"</span>]);var photos = flickr.PhotosSearch(query, TagMode.AnyTag, query, 40, 1);ViewData[<span class="str">"query"</span>] = query;ViewData[<span class="str">"photos"</span>] = photos;<b><span class="kwrd">if</span>(ajax.HasValue &amp;&amp; ajax.Value){RenderView(<span class="str">"_images"</span>, photos);}<span class="kwrd">else</span>{RenderView(<span class="str">"results"</span>);}</b> }{% endcodeblock %}<p>We&rsquo;ve added an optional parameter for the action to check for.&nbsp; There are a number of other ways you might accomplish the same thing by embedding this into the controller itself.&nbsp; You could make a convention that allows a base Controller class set an IsAjax boolean property to true if it detects this variable in form variables or querystring.&nbsp; Whatever you find the cleanest.</p><p>And, Here is our new form!</p><p><a href="http://www.flux88.com/uploads/photo_2Dsearch_2Dajax.png"><img src="/images/photo_2Dsearch_2Dajax_thumb.jpg" hspace="10"  border="0"  /></a></p><p>You couldn&rsquo;t see it in that still image, but there was an animated ajax indicator, and a nice slide down effect on the photo div.&nbsp; If you turn off javascript, the whole thing still works.</p><p>This entire process is basically what you get with UpdatePanel.&nbsp; The same techniques are used to accomplish partial page rendering.&nbsp; Granted, UpdatePanel works slightly different (it&rsquo;s parts of the same page that get updated) but you could easily return a full html document from the action and snip out the html you want to update.&nbsp; Or you might have a specific ViewFactory that knows to only serialize HTML starting with an element root.</p><p>With some conventions and a tiny bit of javascript, you could easily achieve partial page rendering with out any fuss.&nbsp; Plus you get to work with jquery, which is much mor enjoyable than ASP.NET AJAX.</p><p><strong>UPDATE:&nbsp; Download the code below.&nbsp; You&rsquo;ll need your own flickr api key (you can get one instantly from flickr.com).&nbsp; Place it in the web.config.</strong></p><p><a href="http://www.flux88.com/uploads/PhotoSearch.zip" target="_blank">PhotoSearch.zip (124 KB)</a>.&nbsp; </p>
