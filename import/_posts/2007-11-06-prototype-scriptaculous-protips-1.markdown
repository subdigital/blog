--- 
layout: post
title: "Prototype & Scriptaculous - Protips #1"
date: 2007-11-6
comments: true
link: false
---
<p>I often talk to people who haven't worked with one of the cool javascript frameworks out there.&nbsp;&nbsp;I am partial to <a href="http://prototypejs.org" target="_blank">prototype</a> and <a href="http://script.aculo.us" target="_blank">scripaculous</a>, but I also really like <a href="http://mochikit.org" target="_blank">MochiKit</a>.</p><p>If you aren't taking advantage of&nbsp;one of these, then perhaps this post&nbsp;is for you...&nbsp;I give you the ultra quickstart to diving into prototype and scriptaculous!</p><h2>Things you shouldn't ever program javascript without</h2> <p>The best thing ever invented since rubber tires: a replacement for document.getElementById('control_id');</p><p>You know you're not supposed to use `document.all` or `document.ctrl_id`, right?&nbsp; Well at least now you do. document.getElementById() is the cross-browser safe way of getting an element off of the page. The prototype equivalent is `$('control_id')`. This will automatically extend the element returned with some helpful utility methods (like extension methods in C# 3.0). -- more on this later.</p><p>Along the same lines is a useful method for selecting elements using CSS selectors. If you're a CSS junkie (like me!) you'll appreciate this. `&nbsp; `&nbsp;</p>{% codeblock %}$$("div span.info");{% endcodeblock %} This will return all of the DOM elements that would be matched by that CSS Selector. (for those who don't know, this would get all span tags with a class of "info" that are directly nested underneath a div.<p>Want to show or hide an element?&nbsp;Use `<strong>Element.hide(ctrl)</strong>`, `<strong>Element.show(ctrl)</strong>`, or `<strong>Element.toggle(ctrl)</strong>`. You can attach these methods onto the element itself by saying `<strong>Element.extend(ctrl)</strong>`. If you retrieved it via the $() method, then your object already has these methods.</p><p>Let's say you want to grab all of the span tags from a parent div tag.&nbsp; Typically you'd do this:</p>``{% codeblock %}var spans = parentDiv.getElementsByTagName("span");{% endcodeblock %} <p>but what is spans?&nbsp; If you thought it was an array, you'd be wrong.&nbsp; It's a NodeList, which is not nearly as powerful as a javascript array.&nbsp; (With javascript arrays you can push(), pop(), shift(), and other cool things that you can't do with a NodeList.&nbsp; Anyway, back to the spans collection, we can elevate this to an array by using the `$A( spans )` method.&nbsp; Now we can use all of the nice array goodness for that list.</p><h2>Effects for that extra polish</h2> <p>How about fading an element?</p>``{% codeblock %}new Effect.fade(elem);{% endcodeblock %} This also takes options so you can control how fast it fades, for example. Check the excellent docs for all the gory details.<p>Want to make a slide out box?</p>``{% codeblock %}new Effect.toggle(elem, "slide");{% endcodeblock %}` This will toggle the element using slide up and slide down. ("fade" and "appear" also work here for toggling).`<h2>How about some ajax?</h2><p>Forget UpdatePanels. Most of the time we just need to fire off a request and get a list of values back from the server. Prototype has you covered there:</p>``{% codeblock %}new Ajax.Request( "/path_to_server/ajax/AjaxHandler.ashx?op=getUsername&amp;value=bob",<br>{<br>method: "get",<br>onSuccesss: function(result) {<br> if(result.responseText) alert('available!); else alert('taken');<br>},<br>onFailure: function(e) { alert('something went wrong ' + e); }<br>}{% endcodeblock %}<p>I don't know about you, but that's pretty painless to me.</p><p>Want something a bit richer?&nbsp;<b> How about an autocomplete textbox</b>?I wrote this one to auto-complete cities as you type.</p>``{% codeblock %}var url = '~/AjaxHandler.ashx?op=get_cities';<br><br>ac = new Ajax.Autocompleter(city_textbox_id, results_id, url, <br>{<br>paramName: 'filter',<br>frequency: 0.2,<br>minChars: 1,<br>indicator: indicator_id,<br>callback : function(element, filter) { <br>var state = $(state_dropdown_id);<br>var state_code = state.options[state.selectedIndex].value;<br><br>return filter + '&amp;state=' + state_code;<br>}<br>});{% endcodeblock %}<p><i>That's it</i>.I'm not kidding.I handed it a textbox, a div to display the results, and a url to get the data.It takes care of all of the ajax requests, the frequency limiter to prevent us from firing a request with every single keystroke, and returning the results into a list.It even has full keyboard support.The url looks like ~/AjaxHandler.ashx?op=get_citiees&amp;state=TX&amp;filter=Hou and it will return the matches that it finds (based on an HttpHandler I wrote).</p><p></p><p>What are <b>your</b> favorite prototype / scriptaculous protiops?</p>
