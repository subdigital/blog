--- 
layout: post
title: Professional XNA Game Programming - Review
date: 2007-8-30
comments: true
link: false
---
<p><img src="/images/xna_2Dbook_.jpg" hspace="10"  border="0"  />I just finished reading Professional <a href="http://www.amazon.com/Professional-XNA-Game-Programming-Windows/dp/0470126779/ref=pd_bbs_sr_1/104-8400577-8532738?ie=UTF8&amp;s=books&amp;qid=1188482950&amp;sr=8-1">XNA Game Development</a> by <a href="http://abi.exdream.com/">Benjamin Nitchske</a>.&nbsp; It was my first attempt at using the XNA Framework.&nbsp; I have some experience with DirectX, as I have been tinkering with it since version 5. Most of my work has been with the Managed DirectX bits for .NET 1.1. I found it to be much easier and readable than C++, just because of the language differences.</p><p>XNA takes that next productivity leap and really allows you to hit the ground running.&nbsp; You start out with a game loop (complete with elapsed time already calculated for you), a graphics device already setup, and a managed content pipeline for imported models, sounds, and textures.&nbsp; Things like graphics memory getting lost when you alt-tab are already handled for you.</p><p>But enough about XNA, this post is a review for Benjamin's book.&nbsp; If you haven't heard of him before, he was the author of the first Managed DirectX game called Arena Wars, and later wrote RocketCommander. Both games are very well done and he ported RocketCommander to XNA so that you can play it on the XBOX 360. XNA Racer was also done completely by himself, which is very impressive.&nbsp; Needless to say, with all that background and expertise... I had high hopes for this book.</p><p>The first few chapters introduced how Benjamin approaches game development.&nbsp; He calls them "Unit Tests" but that term often implies that the tests are automated.&nbsp; His tests are basically slices of game functionality that he calls manually.&nbsp; For example he might have a unit test to verify that shadows work properly, or that a specific collision detection algorithm works.&nbsp; He is able to setup the update and render loops using anonymous methods and execute them using batch files or manually calling the unit test instead of the main game.&nbsp; I found this to be very interesting, however the code that he used to write it was somewhat ugly and unintuitive.&nbsp; I coded the Pong game following his coding style and was disappointed the whole way through it.&nbsp; While he does say that we will utilize better code for the next game, the code he wrote here was inexcusably bad. I got the game working, however new features and modifications would prove to be difficult because it is just spaghetti code.&nbsp; I swallowed my pride and told myself, ".. it will get better."</p><p>So then I started to follow his next example: Breakout.&nbsp; I have built breakout before using Managed DirectX, and it was quite fun.&nbsp; I was disappointed to find out that he didn't really <em>buid</em> the game through the book, he rather took the reader on an exploration of code already written. And he was true to his word, the code pulled a lot of functionality into "helper" classes which made them reusable.&nbsp; And yes, the code was still horrid.</p><p>I mentioned reusable code.&nbsp; It wasn't reusable like you're thinking.&nbsp; He actually tells you to copy the code from the previous game and paste it into the new game.&nbsp; I'm not kidding.&nbsp; I'm a professional developer.&nbsp; This book is called&nbsp;<em>Professional</em> XNA.&nbsp; Professionals don't write code like that. He begins to talk about 3D programming in a way that is -- while full of information -- poorly organized and generally boring.&nbsp; I learned a lot in this section, but nothing I can really refer to later.&nbsp; It was more like a stream of conciousness than organized writing. </p><p>Let me give you a hard example of how bad the code is.&nbsp; At one point he is talking about how he handles car physics, which was very interesting.&nbsp; Then I saw the class diagram where he implemented it.&nbsp; It looked something like this: </p><p><img src="/images/carPhysics_2Dcrap_small_.jpg" alt="CarPhysics-crap"  border="0"  /></p><p>What!?!? So `ChaseCamera` inherits from `CarPhysics` which in turn inherits from `Player?`&nbsp; Sounds like an object model from the Twilight Zone. This is pure junk as an object model, and is really only there because the CarPhysics object needs to know details about what the player is doing, and indeed so does the camera. But that doesn't mean you should break all rules of OO just to achieve a hack that works.&nbsp; I was so appalled by this I almost didn't finish the book.</p><p>Benjamin knows his stuff, no doubt.&nbsp; I think it&rsquo;s amazing that someone can build something as beautiful as RocketCommander or XNA Racer in less than a month <strong>by yourself</strong>.&nbsp; But I just can&rsquo;t recommend this book because of the code quality.</p><p>I will wrap this up by saying that I *did* enjoy the book because it got me into game programming again, but I find this type of writing almost intolerable.&nbsp; I enjoyed to learn about some nuances around XBOX 360 vs. PC versions of XNA Games, and I especially liked his Unit Testing technique. The information on Shaders was mildly useful, albeit boring. But if you're going to be reading this book, be fore-warned that the code sucks.</p><p>I give it 2.5 / 5 stars. </p>
