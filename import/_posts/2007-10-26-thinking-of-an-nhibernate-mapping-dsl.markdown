--- 
layout: post
title: Thinking of an NHibernate Mapping DSL
date: "2007-10-26"
comments: true
link: false
---
Something about <a href="http://www.ayende.com/blog">Ayende</a> inspires me to build something.&nbsp; I got to thinking today about how I could create a DSL for NHibernate mapping files.&nbsp; What's wrong with XML, you say?&nbsp; Well...<br><br><ul><li><b>It's verbose</b> - XML is known for it's ability to easily validate based on a schema, not for readability.&nbsp; In other words, XML was designed for computers, not humans.&nbsp; Since I am a human (are you?) I would prefer something a bit more friendly.</li><li><b>Schema Validation takes time</b> - Usually you don't notice, but <a href="http://ayende.com/Blog/archive/2007/10/26/Real-World-NHibernate-Reducing-startup-times-for-large-amount-of.aspx">some recent metrics show</a> that it can account for more than 1/2 of the startup time for NHibernate when there are many mapping files.&nbsp; If you have an appliaction with 1000 entities, arguably you have bigger problems than XML's readability and schema validation performance, but it IS noticable so hey....</li><li><b>Generates runtimes errors for semantic structure - </b>Sure, the syntax is validated, but there are so many things that can go wrong with runtime compilation (that's a weird term) of mappings.</li></ul>So I got to thinking how we could do better.&nbsp; Here's what I came up with (with some additions from Ayende) -- it's in Boo:<br><br>{% codeblock %}import flux88.NHibernate.Mapping<br><br>mapping Test.Project, Test.Project.Entities<br><br> entity Customer,<br>	table: Customers<br>	default_access: "nosetter.camelcase-underscore"entity Customer, <br>&nbsp;&nbsp; &nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; identity "Id", <br> 	 generator: "native"<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; property Name,&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <br>	 column:&nbsp;&nbsp; "CustomerName",<br>	 type:&nbsp;&nbsp;&nbsp;&nbsp; "String(12)", &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <br>	 nullable: false<br><br>	property DateJoined,<br><br>	property Address,<br>	 type: "String(200)"<br><br>	set _orders,<br>	 access: "field",<br>	 manyToMany Order,<br>		table: Orders,<br>		pk_column: "customer_id",<br>		fk_column: "order_id",<br>		inverse: true<br>	 <br> entity Order,<br>	table: Orders<br><br>{% endcodeblock %}<p>Note that there isn't a ton of extra fluff, it's meant to be light-weight and easy to write.&nbsp; Additionally you could set defaults at the top (like default_access) so that you can avoid typing it all over your mappings.</p><p>Ayende added the notion of doing this:</p>{% codeblock %}for type in assembly.GetTypes():<br> continue if type.Namespace != "My.Model"<br> entity type.Name, type.Namespace:<br>	idenity "id"<br> <br>for prop in type.GetProperties():<br>property prop.Name<br><br>{% endcodeblock %}<p>You get the idea.</p><p>There could be a number of benefits of doing it like this.&nbsp; First, you can compile it, so you can get syntax errors notified.&nbsp; If you use the BooExplorer I'm pretty sure you'd get intellisense for this.&nbsp; I could also see plugging this into a model validator that would reflect over the model and make sure that all of the properties and access strategies will work with the mapping as defined.</p><p>Anyway, I have some reading up on DSL's to do... Ayende, that means I need you to <a href="http://www.ayende.com/Blog/archive/2007/10/12/Book-Idea-Writing-Domain-Specific-Languages-in-Boo.aspx">write that book on DSLs with Boo</a> :)&nbsp; Can I have it next week?<br></p>Thoughts?&nbsp; Suggestions?<br><p></p>
