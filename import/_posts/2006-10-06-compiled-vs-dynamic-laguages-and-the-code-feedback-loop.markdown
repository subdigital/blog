--- 
layout: post
title: Compiled vs Dynamic Laguages and the Code Feedback Loop
date: 2006-10-6
comments: true
link: false
---
<p>So I bit the bullet and installed Ruby on Rails.&nbsp; I&rsquo;ve been reading a lot about Ruby (mainly blogs) and decided that it&rsquo;s about&nbsp;time to learn another language.&nbsp; The Pragmatic Programmers believe that you should dedicate some time to learn a new language every year.</p><p>My first impressions are probably pretty common.&nbsp; Ruby is not easy to jump into.&nbsp; They have a lot of great information on the internet, but I found that things didn&rsquo;t go as smoothly as I had hoped.&nbsp; This is probably due to the fact that there are major changes between each version of ruby/rails, and there are old&nbsp;tutorials directed at older versions of Ruby or Rails.</p><p>The second hinderance I found was that, with Ruby (among other dynamic languages), you don&rsquo;t get any intellisense.&nbsp; Being brought up with Visual Studio made me spoiled, I suppose.&nbsp; The fact is, with any dynamic language, such as Ruby, Python, or Javascript&hellip;&nbsp; Intellisense is difficult to provide.&nbsp; <em>Type information often isn&rsquo;t available until runtime.</em></p><p>This really annoyed me at first, and I was quick to dismiss dynamic languages.&nbsp; </p><p>Intellisense really makes your learning experience much easier.&nbsp; When I started in .NET, I had a few books, but mainly I just used Intellisense to navigate my way around the framework.&nbsp; If you didn&rsquo;t know how to send email with .NET, you could easily just type <strong>System.Web.Mail. </strong>and you&rsquo;d see the relevant classes involved.&nbsp; Intellisense is an extremely effective discoverability tool.&nbsp;&nbsp; </p><p>Now that I am an experienced .NET developer, I know all of these things by heart.&nbsp; There&rsquo;s not much stopping me from writing my programs in Notepad2.&nbsp; I don&rsquo;t rely as heavily on Intellisense like I did before.&nbsp; I still use Visual Studio, though, because having your compiler and debugger integrated with your editor is almost a necessity.</p><p>This isn&rsquo;t the case with dynamic languages.&nbsp; You write a program (often times in a single file with FAR fewer lines of code) and you run it.&nbsp; That&rsquo;s it.&nbsp; There&rsquo;s no compilation or startup time.&nbsp; You get your results right there.&nbsp; If you mispell a type or call a method on the wrong class of course you&rsquo;ll get an error.&nbsp; But you find this out&nbsp;<strong>sooner that your C# / Java program will compile</strong>.&nbsp; If you can write 5 lines of code and push a button to see if it worked&hellip;&nbsp; without waiting for a compiler or debugger, then your code-feedback-loop is MUCH tighter.&nbsp; Agile principles thrive on having small feedback loops.&nbsp; This is (in my opinion) the single largest reason why Agile is so effective.</p><p>The compiler is becoming less and less popular these days because it cannot protect your program from logic flaws.&nbsp; It&rsquo;s becoming much like the spell-check feature of word processors.&nbsp; They can tell you that you mispelled the word&nbsp;<strike>definate</strike> definite, but a sentence like this one will pass spell-check just fine:&nbsp; <strong>We will meat at the movie theater.</strong>&nbsp; A compiler can only take you so far.&nbsp; To verify your program works, you have to compile it, run it, navigate to the section, and test it.&nbsp; In a dynamic language, half of these steps are removed, leaving you with a much tighter code-feedback-loop.</p><p>We all love intellisense (and I will welcome it for Ruby with open-arms), but don&rsquo;t let that stop you from writing your next small program in a language like Python or Ruby.&nbsp; It will give you another tool in your developer toolbox and make you a better programmer in *any* language.</p><p><em></em>&nbsp;</p>
