--- 
layout: post
title: A Journey with Domain Driven Design (and NHibernate) - Part 9
date: 2007-6-3
comments: true
link: false
---
<p><em>Back by popular demand&hellip; (and WAY too late, I might add&hellip;)</em></p><p>In this article, part 9 of the series, we&rsquo;re going to wrap up our initial feature list and focus on building a user-interface for our video store, named Videocracy.</p><p>Here is our feature list:</p><ul><li><strike>Add new Customer / Account</strike></li><li><strike>Add other members to an account</strike></li><li><strike>Restrict Certain members from renting certain content</strike></li><li><strike>Query for a customer by customer # (swipe card, etc), phone number, or last name</strike></li><li><strike>Add new rental item (move game, console, vcr, etc)</strike></li><li><strike>Rent an item to a customer</strike></li><li>Check Items Back in</li><li>Get movies checked out for a customer</li><li>Query for an item, see who has it</li></ul><p>Let&rsquo;s implement <em>Check Items Back In</em>.</p><p>What is the use case here?&nbsp; Typically a customer drops off a movie, either in the slot from the outside of the store, or directly to an employee.&nbsp; Either case starts with the movie, or the <strong>Item</strong>.</p><p>So the employee is going to scan the item.&nbsp; At this time, they are going to need to see the details of who and when the item was checked out (the <strong>Rental </strong>object), and then have a confirmation button to finalize the check-in (which will update the <strong>Rental </strong>object).</p><p>In order to facilitate scanning the item, we need to be able to query the database for a particular UPC.</p><p><em>In implementing this next test I noticed a large problem with my domain.&nbsp; Our Item class defines a name property with a mapped column in the database.&nbsp; The problem with this is that not all items have names of their own.&nbsp; They might have display names that are a combination of other properties.&nbsp; For example, a video copy of the movie The Matrix shouldn&rsquo;t have a name of &lsquo;The Matrix&rsquo; (it really belongs to the <strong>Movie</strong> class).&nbsp; Typically the text on the outside of a video rental is the movie name followed by maybe the year, and the format that the movie is in.&nbsp; These are deferred properties, so there is no more need for a database column in the item class.&nbsp; I still provide a read-only Name property, and inherited classes have to provide this information.&nbsp; Would you have made a large change like this so eagerly in your project?&nbsp; If you did, how would you know if you broke some existing functionality?&nbsp; As I always say, it&rsquo;s a good thing I have the tests to back me up&hellip;</em></p><p>Here&rsquo;s our next test:</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; [<span style="FONT-WEIGHT: normal; COLOR: teal">Test</span>]</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">public</span> <span style="FONT-WEIGHT: normal; COLOR: blue">void</span> Can_Check_In_Item()</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Item</span> i = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.CreateTestItem(</span><span style="FONT-WEIGHT: normal; COLOR: maroon">"Test_ITEM123"</span>, <span style="FONT-WEIGHT: normal; COLOR: maroon">"1234_UPC"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Customer</span> c = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.GetTestCustomer();</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Employee</span> empl = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.CreateTestEmployee();</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ISession</span> session = <span style="FONT-WEIGHT: normal; COLOR: teal">SessionSource</span><span style="FONT-WEIGHT: normal">.Current.GetSession())</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ITransaction</span> tx = session.BeginTransaction())</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//store the customer and employees</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(c);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(empl);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//check the item out to the customer</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r = <span style="FONT-WEIGHT: normal; COLOR: blue">new</span> <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span>(i, 2.30f);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">RentalTransaction</span> trans = c.CreateTransaction();</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; trans.Employee = empl;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; trans.AddRental(r);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(c);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(trans);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tx.Commit();</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//item is checked out, can we check it back in?</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Item</span> i2 = <span style="FONT-WEIGHT: normal; COLOR: teal">Repository</span><span style="FONT-WEIGHT: normal">&lt;</span><span style="FONT-WEIGHT: normal; COLOR: teal">Item</span><span style="FONT-WEIGHT: normal">&gt;.FindSingleByProperty(</span><span style="FONT-WEIGHT: normal; COLOR: maroon">"UPC"</span>, <span style="FONT-WEIGHT: normal; COLOR: maroon">"1234_UPC"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.IsNotNull(i2); </span><span style="FONT-WEIGHT: normal; COLOR: green">//just a sanity check.&nbsp; Item exists in the table.</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//we need to get the rental by the item upc</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r2 = <span style="FONT-WEIGHT: normal; COLOR: blue">new</span> <span style="FONT-WEIGHT: normal; COLOR
: teal">RentalFinder</span>().FindByItemUPC(i2.Upc);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.IsNotNull(r2, </span><span style="FONT-WEIGHT: normal; COLOR: maroon">"Rental was null!"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; }</p></div><p>There is a lot going on in this test, so let&rsquo;s break it up and take a look at each part.</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Item</span> i = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.CreateTestItem(</span><span style="FONT-WEIGHT: normal; COLOR: maroon">"Test_ITEM123"</span>, <span style="FONT-WEIGHT: normal; COLOR: maroon">"1234_UPC"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Customer</span> c = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.GetTestCustomer();</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Employee</span> empl = <span style="FONT-WEIGHT: normal; COLOR: teal">TestHelper</span><span style="FONT-WEIGHT: normal">.CreateTestEmployee();</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ISession</span> session = <span style="FONT-WEIGHT: normal; COLOR: teal">SessionSource</span><span style="FONT-WEIGHT: normal">.Current.GetSession())</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ITransaction</span> tx = session.BeginTransaction())</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//store the customer and employees</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(c);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(empl);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . . . </p></div><!--EndFragment--><p>Here we setup our environment.&nbsp; We have to have a lot of entities that already exist in order to test our new funtionality.&nbsp; We need an item, a customer, and employee, and an account.&nbsp; We create all of those and save them.&nbsp; (Remember all of this happens within a transaction that is rolled back, so this doesn&rsquo;t stay in the database).</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//check the item out to the customer</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r = <span style="FONT-WEIGHT: normal; COLOR: blue">new</span> <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span>(i, 2.30f);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">RentalTransaction</span> trans = c.CreateTransaction();</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; trans.Employee = empl;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; trans.AddRental(r);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(c);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; session.Save(trans);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tx.Commit();</p><p style="MARGIN: 0px">&nbsp;</p></div><!--EndFragment--><p>Here we setup the rental and perform the rental transaction.&nbsp; This is how the UI will structure the business process.&nbsp; Once everything is saved, it&rsquo;s time to verify that we can retrieve the data solely based on the item&rsquo;s upc code.</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//item is checked out, can we check it back in?</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Item</span> i2 = <span style="FONT-WEIGHT: normal; COLOR: teal">Repository</span><span style="FONT-WEIGHT: normal">&lt;</span><span style="FONT-WEIGHT: normal; COLOR: teal">Item</span><span style="FONT-WEIGHT: normal">&gt;.FindSingleByProperty(</span><span style="FONT-WEIGHT: normal; COLOR: maroon">"UPC"</span>, <span style="FONT-WEIGHT: normal; COLOR: maroon">"1234_UPC"</span>);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.IsNotNull(i2); </span><span style="FONT-WEIGHT: normal; COLOR: green">//just a sanity check.&nbsp; Item exists in the table.</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//we need to get the rental by the item upc</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r2 = <span style="FONT-WEIGHT: normal; COLOR: blue">new</span> <span style="FONT-WEIGHT: normal; COLOR: teal">RentalFinder</span>().FindByItemUPC(i2.Upc);</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.IsNotNull(r2, </span><span style="FONT-WEIGHT: normal; COLOR: maroon">"Rental was null!"</span>);</p></div><p>The Rental Finder class will encapsultate common queries so that we can reuse them across the application.&nbsp; Here&rsquo;s the code for that method:</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="FONT-WEIGHT: normal; COLOR: blue">public</span> <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> FindByItemUPC(<span style="FONT-WEIGHT: normal; COLOR: blue">string</span> upc)</p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r = <span style="FONT-WEIGHT: normal; COLOR: teal">Repository</span><span style="FONT-WEIGHT: normal">&lt;</span><span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span><span style="FONT-WEIGHT: normal">&gt;.FindSingleByQuery(</span><span style="FONT-WEIGHT: normal; COLOR: maroon">"from Rental r where r.Item.Upc = :upc and r.DateReturned is null"</span>, <span style="FONT-WEIGHT: normal; COLOR: blue">new</span> <span style="FONT-WEIGHT: normal; COLOR: teal">Parameter</span>(<span style="FONT-WEIGHT: normal; COLOR: maroon">"upc"</span>, upc));</p><p style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">return</span> r;</p><p style="MARGIN: 0px">}</p></div
><!--EndFragment--><p>There is a lot going on here in this test, but what you need to get from this is that we are setting up the stage for our scenario.&nbsp; As our tests get more involved we are verifying that business cases are being met.&nbsp; If we make drastic changes later on, we will know if we have broken existing business functionality.</p><p>The next thing to check is to make sure that we can check the item back in.&nbsp; I add a .Return() method on the rental, which doesn&rsquo;t exist yet, so I need some additional tests.</p><p>I also need to be able to calculate late fees in a central place to make that easy to change later.&nbsp; I add a few tests for this as well.</p><p>It turns out that the Return() method is easy to implement.&nbsp; All we need to do is set the return date and calculate the late fee and save it.</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">[<span style="FONT-WEIGHT: normal; COLOR: teal">Test</span>]</p><p style="MARGIN: 0px"><span style="FONT-WEIGHT: normal; COLOR: blue">public</span> <span style="FONT-WEIGHT: normal; COLOR: blue">void</span> CanReturnItem()</p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Rental</span> r1 = GetTestRental(<span style="FONT-WEIGHT: normal; COLOR: teal">DateTime</span><span style="FONT-WEIGHT: normal">.Now.AddDays(-6));</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; r1.Return();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.IsTrue(r1.DateReturned.HasValue);</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: green">//it's 1 day late, so expect the right late fee</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">float</span> lateFee = <span style="FONT-WEIGHT: normal; COLOR: teal">Utility</span><span style="FONT-WEIGHT: normal">.LATE_FEE_PER_DAY;</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: teal">Assert</span><span style="FONT-WEIGHT: normal">.AreEqual(lateFee, r1.LateFee);</span></p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">}</p></div><!--EndFragment--><p>which leads to the following code in the Rental class&hellip;</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px"><span style="FONT-WEIGHT: normal; COLOR: blue">public</span> <span style="FONT-WEIGHT: normal; COLOR: blue">void</span> Return()</p><p style="MARGIN: 0px">{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">this</span><span style="FONT-WEIGHT: normal">.DateReturned = </span><span style="FONT-WEIGHT: normal; COLOR: teal">DateTime</span><span style="FONT-WEIGHT: normal">.Now;</span></p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">this</span><span style="FONT-WEIGHT: normal">.LateFee = </span><span style="FONT-WEIGHT: normal; COLOR: teal">Utility</span><span style="FONT-WEIGHT: normal">.CalculateLateFee(_dateDue, _dateReturned.Value);</span></p><p style="MARGIN: 0px">}</p></div><p>Now we need to finish the original test and verify that we can save the rental.</p><div style="FONT-WEIGHT: bold; FONT-SIZE: 8pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: Consolas"><p style="MARGIN: 0px">&nbsp;r2.Return();</p><p style="MARGIN: 0px">&nbsp;</p><p style="MARGIN: 0px">&nbsp;<span style="FONT-WEIGHT: normal; COLOR: green">//save the rental</span></p><p style="MARGIN: 0px">&nbsp;<span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ISession</span> session = <span style="FONT-WEIGHT: normal; COLOR: teal">SessionSource</span><span style="FONT-WEIGHT: normal">.Current.GetSession())</span></p><p style="MARGIN: 0px">&nbsp;{</p><p style="MARGIN: 0px">&nbsp; &nbsp; <span style="FONT-WEIGHT: normal; COLOR: blue">using</span> (<span style="FONT-WEIGHT: normal; COLOR: teal">ITransaction</span> tx = session.BeginTransaction())</p><p style="MARGIN: 0px">&nbsp; &nbsp; {</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; session.SaveOrUpdate(r2);</p><p style="MARGIN: 0px">&nbsp; &nbsp; &nbsp; &nbsp; tx.Commit();</p><p style="MARGIN: 0px">&nbsp; &nbsp; }</p><p style="MARGIN: 0px">&nbsp;}</p></div><p>This test passes and we&rsquo;ve implemented our feature!</p><p>I think I&rsquo;m at a point where I have demonstrated how we can work on core business features for an application test-first, using NHibernate along the way for persistence.&nbsp; A lot more work has to be done to complete our domain model, but that will be left as an excercise for the reader.</p><p>Instead, I would like to focus my efforts on getting a basic UI in place using ASP.NET.&nbsp; I said in part 1 that I wanted to demonstrate how to work with the NHibernate Session in a web environment, so that&rsquo;s where I will pick up next time.</p><p>Until then, you can download and view the current project here:</p><p><a href="http://www.flux88.com/uploads/Videocracy_09.zip" target="_blank">File Attachment: Videocracy_09.zip (3442 KB)</a></p>
