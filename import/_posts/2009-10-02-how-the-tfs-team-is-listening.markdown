--- 
layout: post
title: How the TFS team is listening
date: 2009-10-2
comments: true
link: false
---
<p><em>This has been sitting in my drafts folder for way too long, it’s a bit dated, but still good to mention…</em></p>  <p>It’s no secret that I’m a <a href="http://search.twitter.com/search?q=subdigital+tfs" target="_blank">TFS skeptic</a>.&#160; I don’t really like the tool, and feel that it adds more friction than value.&#160; Of course that’s just my opinion, and it’s easy to just dismiss my comments and go about your day (if you don’t agree with me).</p>  <p><a href="http://blogs.msdn.com/jasonba/" target="_blank">Jason Barile</a> has always been friendly and eager to help address some of the issues I’ve had with 2.5 years working with TFS.&#160; Recently he offered to have a conference call with himself and a few other members of his team (they work on TFS).&#160; I have to hand it to Jason for being so open &amp; patient with us opinionated loud-mouths.</p>  <p>Anyway, here is a brain-dump of the things we talked about.&#160; It’s really raw, but shows most of the pain points that I have (and I believe others do as well).</p>  <p>While I still don’t like TFS, I’m encouraged to find that there are people like Jason listening to the community and making sure that the feedback makes it to the rest of the team.&#160; What happens after that is anybody’s guess, but at least they aren’t oblivous.</p>  <p><em>(I should also mention that I’m only talking about the source control here.&#160; I realize TFS is more than that, but this is the piece we use most)</em></p>  <p>Without further ado…</p>  <h4>&#160;&#160;&#160; File locking </h4>  <ul>   <li>I don't always use VS to edit files.&#160; Opening VS just to check out a file is silly.&#160; tf.exe works, but pales in comparison to other CLIs</li>    <li>hinders command line automation (migration framework)</li>    <ul>     <li>just about any work I do with build automation has to do something with TFS.&#160; I recall pain in generating migrations automatically (get the latest in a folder, check out the project, create a file, add the reference to the project file, add the file to TFS, check in changes, check them out again) this is largely unnecessary with Git or SVN</li>   </ul>    <li>takes longer to refactor (explicit check-out EACH file) </li>    <ul>     <li>if I do a rename in Resharper, it’s as simple as F2.&#160; If this touches 30 files I shouldn’t even <em>notice</em> the delay.&#160; With TFS, even connected to the local LAN, it’s dog slow.</li>   </ul> </ul>  <h4>&#160;&#160;&#160; Server keeps track of state, not client </h4>  <ul>   <li>files get out of sync, TFS said &quot;Nothing to check in&quot; </li>    <ul>     <li>produces bad builds </li>   </ul>    <li>merge gets confused : “Nothing to merge”&#160; O’rly?&#160; Beyond compare tells me the files are different there, buddy.</li> </ul>  <p>&#160;</p>  <h4>Check-in notifications/emails </h4>  <ul>   <li>Don't include much details.&#160; It’s almost completely useless</li>    <li>Can't click to view file/diff (should have a web based viewer for this)</li>    <li>It’s clear that this is just simply to put a checkbox on a feature matrix and not really strive to be a useful part of the dev process.</li> </ul>  <h4>Merging </h4>  <ul>   <li>Seems to frequently conflict for no reason.&#160; Need to reproduce this. </li>    <li>&#160;&#160;&#160; Deleted files </li>    <ul>     <li>&#160;&#160;&#160;&#160;&#160;&#160;&#160; don't show them </li>      <li>&#160;&#160;&#160;&#160;&#160;&#160;&#160; should be able to navigate back in history to show deleted items </li>   </ul>    <li>Get NullReferenceExceptions regularly, on normal merge scenarios.&#160; This is repeatable.</li> </ul>  <h4>Branch per feature impossible? </h4>  <ul>   <li>branching is too costly </li>    <ul>     <li>guidance therefore says “use it sparingly”</li>      <li>can’t do it offline</li>   </ul>    <li>merging is painful</li>    <ul>     <li>BeyondCompare is a MUST.&#160; The built-in merge tool is so bad it might as well not be included.</li>   </ul> </ul>  <h4>UI </h4>  <ul>   <li>Viewing / Querying work items ==&gt; YUCK</li>    <ul>     <li>TFSWA is just a start, not a good user experience</li>      <li>Needs to be accessible standalone (dual monitor)</li>   </ul>    <li>Dropdown fields that span the width of the monitor (WTF!)</li>    <li>Hides my code </li>    <li>Compared to Unfuddle, Basecamp, Fogbugz, Lighthouse, it’s clear that little thought to UI &amp; general look &amp; feel was considered a priority.&#160; Even Rally &amp; VersionOne look better than this, and I’m generally harsh on them for UI as well.</li>    <li>Needs to be optimized for pure-keyboard use.&#160; We’re talking about <em>programmers</em> here!</li> </ul>  <h4>Reports </h4>  <ul>   <li>Remaining work report is completely useless </li>    <ul>     <li># of Work Items is a measure of progress?&#160; What about 100 hour work items or 15 minute work items?&#160; The agile process template is a joke.</li>   </ul>    <li>Most companies I’ve seen do little to NO CUSTOMIZATION AT ALL here.&#160; This leaves them with mediocre project templates that do more to hinder the process than help it.</li>    <li>Reports have that ugly SSRS “chrome” – feels clunky (yes I realize this is nitpicky, but this is <em>my</em> blog!)</li> </ul>  <h4>Workspaces are overcomplicated </h4>  <ul>   <li>can get corrupted, need to rebuild </li>    <ul>     <li>this has happened when I got pissed &amp; unchecked read-only &amp; write to files directly (like editing a README.txt file)</li>   </ul>    <li>why do I need a workspace again?</li>    <ul>     <li>why the heck does the server need to know where my local working copy is?</li>   </ul> </ul>  <h4>Command Line Interface</h4>  <ul>   <li>should be directory-context-aware </li>    <ul>     <li>“tf checkin” wants to check in every file in every workspace on my machine.&#160; WTFF!</li>      <li>should be optimized for alpha geeks like me </li>      <ul>       <li>get inspired by git </li>        <li>no need for a fancy GUI</li>     </ul>      <li>if you were to use git for 1 day you’d realize why they don’t *need* GUI tooling.&#160; Their CLI is pretty friendly and intuitive. tf.exe is powerful, sure, but it’s usually the last resort.&#160; I haven’t met anyone who uses <em>just</em> the CLI.</li>   </ul> </ul>  <p>Again, these are just my opinions.&#160; The team was very receptive to my criticisms.&#160; They also had a couple of good explanations / retorts.</p>
